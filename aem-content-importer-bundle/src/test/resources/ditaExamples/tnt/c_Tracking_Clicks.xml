<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_83F0D3C5BB004185AEECDE5F96905103">
  <title>Click Tracking</title>
  <shortdesc>Clicks can be tracked as success events. 
  </shortdesc>
  <prolog>
    <metadata>
      <othermeta name="solution" content="Target" />
      <othermeta name="topic" content="Advanced" />
    </metadata>
  </prolog>
  <conbody>
    <p>Tracking clicks usually provides quicker results with a higher
		confidence level than tracking success only at the end of the funnel. 
	 </p>
    <p>Use 
		<uicontrol>Click From Display Mbox</uicontrol> to track clicks. This is
		built-in functionality. When you add a success metric to a campaign, the option
		
		<uicontrol>Click From Display Mbox</uicontrol> is always in the 
		<wintitle>mbox</wintitle> drop down. If you select this option, the
		success metric automatically counts anyone clicking anywhere in the mbox div
		area and landing on a page that has an 
		<filepath>mbox.js</filepath> file. There must be an 
		<filepath>mbox.js</filepath> file on the destination page for a click to
		be tracked. 
	 </p>
    <p>You can also track clicks by adding an onclick event to any link. This
		technique only tracks direct links, can be used without an mbox, and can be
		used to return additional information, such as: 
	 </p>
    <p>
      <ul id="ul_29A6C4F403D740EA902A9711475F2BA0">
        <li id="li_D5F442FFE3474ECF9E946478216BBF6C"> Name for the click 
		</li>
        <li id="li_E44E2026AA2C454FBB0BDAB4AB193754"> Weighting for a click 
		</li>
        <li id="li_8246DAFA985D41D580408F041488728E"> Analytics information 
		</li>
        <li id="li_6C99168B531F429EAFA9200F84A80BFE"> Incorporation into
		  Analytics onClick tracking 
		</li>
      </ul>
    </p>
    <p>This technique requires extra code in the mbox and in the links you want
		to track. 
	 </p>
    <p>Add the following code to the Extra JavaScript section of the 
		<filepath>mbox.js</filepath> setting page and then download the new 
		<filepath>mbox.js</filepath> file and replace your old one on your site: 
	 </p>
    <p>
      <codeblock outputclass="syntax html">mboxDefine('','<b>Customer_Name_onClick</b>');

function tt_Log (URL) {

var mboxDestination = ("Destination="+URL);

mboxUpdate('<b>Customer_Name_onClick</b>', mboxDestination);

}

function tt_Redirect(URL){

var mboxDestination = ("Destination="+URL);

mboxUpdate('<b>Customer_Name_onClick</b>', mboxDestination);

window.setTimeout("window.location.href='" + URL + "'", 500);

}</codeblock>
    </p>
    <p>Any name can be used for the 
		<codeph>Customer_Name</codeph> in the code. This appears as an mbox that
		can be selected as a success metric. 
	 </p>
    <p>Change your links on your page or in your offers to include the 
		<codeph>onClick</codeph> parameter (the bold text in the "changed"
		examples), as shown in the following table: 
	 </p>
    <p>
      <table id="table_172C8D9949704EA68D2F75D89D185094">
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="4.94*" />
          <thead>
            <row>
              <entry colname="col1">Type of Link 
				</entry>
              <entry colname="col2">Link Code Changes 
				</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <p>Open in a new window 
				  </p>
              </entry>
              <entry colname="col2">
                <p>Original: 
					 <codeph>&lt;a title="Test Link" href="http://www.adobe.com"
						target="_blank"&gt; Test Link &lt;/a&gt;</codeph></p>
                <p>Changed: 
					 <codeph>&lt;a title="Test Link" href="http://www.adobe.com"
						target="_blank" 
						<b>onclick="tt_Log(this.href);</b>"&gt;Test
						Link&lt;/a&gt;</codeph></p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <p>Open in the same window 
				  </p>
              </entry>
              <entry colname="col2">
                <p>Original: 
					 <codeph>&lt;a title="Test Link" href="http://www.adobe.com"
						&gt;Test Link&lt;/a&gt;</codeph></p>
                <p>Changed: 
					 <codeph>&lt;a title="Test Link" href="http://www.adobe.com" 
						<b>onclick="tt_Redirect(this.href);</b> return
						false;"&gt;Test Link&lt;/a&gt;</codeph></p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </p>
    <p>Talk to your consultant for additional techniques for tracking clicks. 
	 </p>
    <!--<p>While 
		<codeph>mboxTrack()</codeph> fires off a single tracking pixel based on
		the user interaction event or page event, the 
		<codeph>mboxTrackLink()</codeph> version leverages 
		<codeph>mboxTrack()</codeph> plus introduces a page redirect delay for
		recording clicks on hyperlinks. 
	 </p> 
	 <p>Event tracking is generally done by placing JavaScript code, in this
		case the 
		<codeph>mboxTrack()</codeph> and 
		<codeph>mboxTrackLink()</codeph> function calls, directly inside the
		event handler. Many HTML elements have built-in event handlers, special
		properties that relate to a user interaction such as 
		<codeph>onclick</codeph>, 
		<codeph>onmousedown</codeph>, 
		<codeph>onmouseover</codeph>, 
		<codeph>onload</codeph>, 
		<codeph>ondblclick</codeph>, 
		<codeph>onbeforeunload</codeph>, etc. You can set these properties inside
		the HTML elements to send your mbox tracking calls to the Test&amp;Target
		servers, and map those tracking calls to Success Metrics. 
	 </p> 
	 <p>The 
		<codeph>onclick</codeph> event occurs when an HTML element, such as a
		hyperlink, is clicked. You can set the 
		<codeph>mboxTrackLink()</codeph> event to track the click directly inside
		that 
		<codeph>onclick</codeph> attribute. The benefit of 
		<codeph>mboxTrackLink()</codeph> is that it can be used specifically for
		hyperlinks and the code is completely reusable, link after link. Most likely,
		this is all you ever need to paste within your hyperlinks: 
	 </p> 
	 <p><codeph> onclick="mboxTrackLink('mboxClick', 'URL='+this.href,
		  this.href);return false;"</codeph> 
	 </p> 
	 <p>While 
		<codeph>mboxTrackLink()</codeph> is specifically for tracking hyperlinks
		with the 
		<codeph>onclick</codeph> event, 
		<codeph>mboxTrack()</codeph> can be used for 
		<b> 
		  <i>all events</i></b>, such as when a page unloads or when a user
		hovers over an image. It can also track hyperlinks using the 
		<codeph>onmousedown</codeph> event. The 
		<codeph>onmousedown</codeph> event refers to when the user is just about
		to click, when the left mouse button has been pressed but not yet released. You
		can use 
		<codeph>mboxTrack()</codeph> in the 
		<codeph>onmousedown</codeph> event to track a link before the click
		happens and the page unloads. Or, you can use 
		<codeph>mboxTrack()</codeph> for page events, such as when a form
		validates and is about to submit, or when an ajax call has been successfully
		made or errored out. The benefit of 
		<codeph>mboxTrack()</codeph> is that it is completely flexible and can be
		used for any and all other types of tracking events, application events, page
		events, and so on, as a true pixel tracker. 
	 </p> 
	 <p>The 
		<codeph>mboxTrack()</codeph> function tracks all events 
		<i>without</i> a redirect. Notice that you can pass in whatever you want,
		including additional, regular mbox parameters or set profile parameters in the
		same event in regular URL Query string format, all compiled together as the
		second argument of the function call. Or, do not pass anything other than the
		mbox name. You can either embed the function directly into the element that you
		want to track or paste it inside an existing JavaScript function already in the
		page to inject your tracking calls within your application. 
	 </p> 
	 <p>For example: 
	 </p> 
	 <p> 
		<codeblock outputclass="syntax html">&lt;a target="_blank" href="://google.com" onmousedown="mboxTrack('mbox_onClick','URL='+this.href);"&gt;Leaving&lt;/a&gt;

&lt;input type="image" src="submit.gif" onmousedown="mboxTrack('globalTracking','btn=clicked&amp;profile.form=A');"&gt;
&lt;iframe onload="mboxTrack('homepage_iframe_loaded');" src="etc" &gt;&lt;/iframe&gt;
&lt;script type="text/javascript"&gt;
function validate(form){
       if(…the form is valid…){
          mboxTrack('RegistrationFormSubmitted');
          form.submit(); 
       } 
}
</codeblock> 
	 </p> 
	 <p>You can implement link tracking with a delayed redirect. Use the 
		<codeph>mboxTrackLink()</codeph> function, passing in everything much
		like you would 
		<codeph>mboxTrack()</codeph>, but including a third parameter for the URL
		to be redirected. This can either be done inside the HTML elements or remotely
		to all links on the page. Again, notice how this particular code pattern
		becomes a reusable template for all link tracking, although the mbox name can
		be customized to whatever you want it to be: 
	 </p> 
	 <p> 
		<codeph>onclick="mboxTrackLink('mboxClick', 'URL='+this.href,
		  this.href);return false;"</codeph> 
	 </p> 
	 <p>For example: 
	 </p> 
	 <p> 
		<codeblock outputclass="syntax html">&lt;a href="index.html" onclick="mboxTrackLink('onclick_mbox', 'URL='+this.href, this.href);return false;"&gt;
hyperlink&lt;/a&gt; 
&lt;script type="text/javascript"&gt;
$('a').click(function(event){  //remotely inject tracking into all links on the page via jQuery 
       event.preventDefault();
       mboxTrackLink('linkClick','link='+this.href,this.href)
});
&lt;/script&gt;
</codeblock> 
	 </p> 
	 <p>Finally, you can also track clicks using a redirector. This link calls
		out to Test&amp;Target and then redirects the visitor immediately to their
		destination site. This is done using the same redirector that is used in ads
		for Test&amp;Target, as explained in 
		<xref href="c_Testing_Ads.xml#concept_C824F400EAA34B9489FF765F87FD6DBD" type="concept" format="dita" scope="local"><?xm-replace_text Using Behavioral Ads?></xref>.
		By default, the redirector uses third party cookies. However, you can modify
		the redirector URL to only use first party cookies. The first party only
		version of the redirector, referred to as an "onsite redirector" looks like
		this: 
	 </p> 
	 <p> 
		<codeblock outputclass="syntax html">http://clientcode.tt.omtrdc.net/clientcode/ubox/page?mbox=mbox_name_clicked
&amp;mboxDefault=real_encoded_destination_URL&amp;mboxPC=visitor_PC_ID&amp;mboxXDomain=disabled</codeblock> 
	 </p> 
	 <p>Where: 
	 </p> 
	 <p> 
	 <ul id="ul_DCE55653262341898AF06883CA319F2A"> 
		<li id="li_B1FFD5EDF3E548AA9A4E5D969A0D11EA"> 
		  <codeph>mbox_name_clicked</codeph> is a name given to this link tracker
		  that will be used to select this in Test&amp;Target. 
		</li> 
		<li id="li_52DB390258B34B86A46FC86C848A18E0"> 
		  <codeph>real_encoded_destination_URL</codeph> is the destination of the
		  link. 
		</li> 
		<li id="li_80B53DA931E1464A8BD56A61E6892553"> 
		  <codeph>visitor_PC_ID</codeph> is Test&amp;Target's unique visitor
		  identifier. This can be outputted in an offer with this syntax: 
		  <codeph>${user.pcId}</codeph>. 
		</li> 
	 </ul> 
	 </p> 
  -->
  </conbody>
  <related-links>
    <link href="c_Managing_Hosts.xml#concept_BDF83A0B965A4CD486B16DAEA2F87BA7" type="concept" format="dita" scope="local">
      <?xm-replace_text Hosts?>
    </link>
    <link href="c_Managing_users_and_Roles.xml#concept_4DB925AA849C496C9761699D6EB47CFE" type="concept" format="dita" scope="local">
      <?xm-replace_text Users and Roles?>
    </link>
    <link href="c_About_the_TestTarget_Cookie.xml#concept_5E53D1A6DF224D7BAE76F4AE390B9DA1" type="concept" format="dita" scope="local">
      <?xm-replace_text Test&Target Cookie?>
    </link>
    <link href="t_Adding_an_Opt-Out_Link.xml#task_439452291D1E4F458F8EC46E7D996FCD" type="task" format="dita" scope="local">
      <?xm-replace_text Add an Opt-Out Link?>
    </link>
    <link href="c_Managing_Mboxes.xml#concept_37B4E053E1244DD6B9D3CD8C4945B62D" type="concept" format="dita" scope="local">
      <?xm-replace_text Mboxes?>
    </link>
    <link href="c_Parameters_and_Values.xml#concept_DB5AB8E9682D41DDA5621FFE856C6336" type="concept" format="dita" scope="local">
      <?xm-replace_text Parameters and Values?>
    </link>
    <link href="c_ECommerce_Integration.xml#concept_F090BCC7AB1F47D9A36F22D5C438E999" type="concept" format="dita" scope="local">
      <?xm-replace_text ECommerce Integration?>
    </link>
    <link href="c_Tracking_Clicks_to_Offsite_Domains.xml#concept_3E014BC7CD1140EF89710A02C35DFAD4" type="concept" format="dita" scope="local">
      <?xm-replace_text Track Clicks to Offsite Domains?>
    </link>
    <link href="c_Working_with_Analytics_Packages.xml#concept_1160021CC3F54E3193973FCF93E2545F" type="concept" format="dita" scope="local">
      <?xm-replace_text Working with Analytics Packages?>
    </link>
  </related-links>
</concept>