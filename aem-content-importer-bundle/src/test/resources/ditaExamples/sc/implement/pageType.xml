<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_F67870238EF74491B5D3909A33CDB985">
  <title>pageType</title>
  <shortdesc> The 
	 <varname>pageType</varname> variable is used only to designate a 404 Page
	 Not Found Error page. 
  </shortdesc>
  <prolog>
    <metadata>
      <othermeta name="solution" content="Analytics" />
      <othermeta name="topic" content="Developer and implementation" />
      <othermeta name="subtopic" content="Variables" />
    </metadata>
  </prolog>
  <conbody>
    <table id="table_0492B136E9D14070A6CA49ED534BCA4C">
      <tgroup cols="4">
        <colspec colnum="1" colname="col1" colwidth="*" />
        <colspec colnum="2" colname="col2" colwidth="*" />
        <colspec colnum="3" colname="col3" colwidth="*" />
        <colspec colnum="4" colname="col4" colwidth="*" />
        <thead>
          <row>
            <entry> Max Size 
				</entry>
            <entry> Debugger Parameter 
				</entry>
            <entry> Reports Populated 
				</entry>
            <entry> Default Value 
				</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry> 20 bytes 
				</entry>
            <entry> pageType 
				</entry>
            <entry> Paths &gt; Pages &gt; Pages 
				  <p>Not Found 
				  </p></entry>
            <entry> "" 
				</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>The 
		<varname>pageType</varname> variable captures the errant URL when a 404
		Error page is displayed, which allows you to quickly find broken links and
		paths that are no longer valid on the custom site. Set up the 
		<varname>pageType</varname> variable on the error page exactly as shown
		below.
	 </p>
    <p> Do not use the page name variable on 404 error pages. The 
		<varname>pageType</varname> variable is only used for the 404 Error
		page. 
	 </p>
    <p> In most cases, the 404 Error page is a static page that is hard-coded.
		In these cases, it is important that the reference to the .JS file is set to an
		appropriate global or relative path/directory. 
	 </p>
    <section id="section_C1C59968226446559B05F6EE7374D525">
      <title>Syntax and Possible Values</title>
      <p>The only allowable value of 
		  <varname>pageType</varname> is "errorPage" as shown below. 
		</p>
      <codeblock outputclass="syntax javascript">s.pageType="errorPage"</codeblock>
    </section>
    <section id="section_6CE22FCB835B4A19B633B7F67E73A115">
      <title>Examples</title>
      <codeblock outputclass="syntax javascript">s.pageType="errorPage"</codeblock>
    </section>
    <section id="section_3B304A6D3A6C48F2BE90B4DA92A39DDB">
      <title>
        Configuration Settings</title>
      <p>None 
		</p>
    </section>
    <section id="section_943681AB01FE47BEAC72E93CB60C53C8">
      <title>Pitfalls, Questions, and Tips</title>
      <p>To capture other server-side errors (such as 500 errors), use a prop
		  to capture the error message and put "500 Error: &lt;URL&gt;" where &lt;URL&gt;
		  is the URL requested, in the 
		  <varname>pageName</varname> variable. By following this course of
		  action, you can use 
		  <wintitle>Pathing</wintitle> reports to see which paths caused users to
		  generate 500 errors. The prop explains which error message is given by the
		  server. 
		</p>
    </section>
  </conbody>
</concept>