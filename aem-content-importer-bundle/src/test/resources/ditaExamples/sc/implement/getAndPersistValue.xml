<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_E3D0FEC81E1F4987B39CC467F19FFCFF"> 
  <title>getAndPersistValue</title> 
  <shortdesc>The getAndPersistValue plug-in obtains a value of your choosing
	 and populates it into a 
	 <keyword>Analytics</keyword> variable for a determined period. A common use
	 is to see how many page views a campaign generates after a click-through, which
	 enables you to easily see the most common pages for each campaign. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/> 
		<othermeta name="subtopic" content="Plug-ins"/> </metadata>
  </prolog> 
  <conbody> 
	 <note type="important">This plug-in has not been validated to be compatible
		with 
		<xref href="appmeasure_mjs.xml#concept_F3957D7093A94216BD79F35CFC1557E8"
		 format="dita" scope="local">AppMeasurement for JavaScript</xref>. See 
		<xref href="plugins_support.xml#concept_E31A189BC8A547738666EB5E00D2252A"
		 format="dita" scope="local"><?xm-replace_text AppMeasurement Plug-in Support?></xref>.
		
	 </note> 
	 <p>For example, you might use this plug-in to set a campaign tracking code
		from the 
		<varname>campaign</varname> variable into a Custom Traffic
		(<varname>s.prop</varname>) variable on each visitor's page view made for the
		next 30 days. This example lets you determine how many page views the tracking
		code generated as a result of the original click-through. 
	 </p> 
	 <note>The following instructions require you to alter the data collection
		code on your site. This can affect data collection on your site, and should
		only be done by a developer with experience using and implementing 
		<keyword>Analytics</keyword>. 
	 </note> 
	 <section id="section_92E94A96A4764113B5588F1B83E3DE2C"> 
		<title>Plug-in Code and Implementation</title> 
		<p> 
		  <b>CONFIG SECTION</b>: No changes required for this section. 
		</p> 
		<p> 
		  <b>Plug-in Configuration</b> 
		</p> 
		<p>Place the following code within the 
		  <varname>s_doPlugins()</varname> function, which is located in the area
		  of the 
		  <varname>s_code.js</varname> file labeled 
		  <i>Plugin Config</i>. Choose one Custom Traffic (s.prop) variable or
		  one Custom Conversion (s.eVar) variable for use in capturing persisted value
		  data. This should be a variable that has been enabled using the Admin Console,
		  but which is not currently in use for any other purpose. You can use the
		  following example and update it based on your requirements. 
		</p> 
		<p> 
		  <codeph>s.prop1=s.getAndPersistValue(s.campaign,'s_getval',30);</codeph>
		  
		</p> 
		<p> 
		  <varname>s.getAndPersistValue</varname> has three arguments: 
		</p> 
		<ol id="ol_2B8B7A54792B49218485493AB7CDF265"> 
		  <li id="li_12A61EE402DC4478B224CD90DCD4EDC7">Currently populated
			 variable or value to persist (<varname>s.campaign</varname> shown above). 
		  </li> 
		  <li id="li_D60A766A60E84B4DB5B700249ACF7324">Cookie name, used to store
			 the value (<varname>s_getval</varname> shown above). 
		  </li> 
		  <li id="li_AFE58638DB3045EB868CD38C995BEB30">Period of time for
			 persistence, in days. "30" as shown above would cause the value to be populated
			 into the selected variable on every page view made by the user for the next 30
			 days. If omitted, the setting defaults to 
			 <i>session</i>. 
		  </li> 
		</ol> 
		<p> 
		  <b>PLUGINS SECTION</b>: Add the following code to the area of the 
		  <filepath>s_code.js</filepath> file labeled PLUGINS SECTION. Do not
		  make any changes to this portion of the plug-in code. 
		</p> 
		<codeblock outputclass="syntax javascript">/*
 * Plugin: getAndPersistValue 0.3 - get a value on every page
 */
s.getAndPersistValue=new Function("v","c","e",""
+"var s=this,a=new Date;e=e?e:0;a.setTime(a.getTime()+e*86400000);if("
+"v)s.c_w(c,v,e?a:0);return s.c_r(c);");</codeblock> 
		<p>Always test plug-in installations extensively to ensure that data
		  collection is as expected before deploying in a production environment. 
		</p> 
	 </section> 
  </conbody> 
</concept> 
