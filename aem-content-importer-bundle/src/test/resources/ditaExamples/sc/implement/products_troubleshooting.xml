<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_AFAEFE3BA85847E4903FC50581E91AB2">
  <title>Common Mistakes in the Products Variable</title>
  <shortdesc>The 
	 <wintitle>s.products</wintitle> variable may be the most syntactically
	 complex variable used by data collection.
  </shortdesc>
  <prolog>
    <metadata>
      <othermeta name="solution" content="Analytics" />
      <othermeta name="topic" content="Developer and implementation" />
      <othermeta name="subtopic" content="Troubleshooting" />
    </metadata>
  </prolog>
  <conbody>
    <p> Commas, semi-colons, pipes, and equals signs all play specific roles in
		the variable. It has no overall maximum length, but each individual product
		entry cannot be longer than 100 bytes (including multi-byte characters).
		Mistakes in implementation of this variable are understandable, but
		unfortunately for developers, 
		<wintitle>s.products</wintitle> is often a site's most important variable
		because it makes possible the tracking of revenue, units, product names, and so
		forth. 
	 </p>
    <p>Here are a few extremely easy-to-make mistakes that
		can cause issues on any implementation. 
	 </p>
    <p> Make sure that your 
		<wintitle>category</wintitle>, 
		<wintitle>product name</wintitle>, and 
		<wintitle>revenue</wintitle> totals are devoid of commas and semi-colons.
		The comma is used to separate entries in the 
		<wintitle>s.products</wintitle> string. This happens when you have two
		products in the same transaction, the semi-colon is used to delimit fields
		within an entry. If you use a comma or semi-colon in any other way, 
		data collection assumes that you are separating product
		entries. Consider the following example: 
	 </p>
    <codeblock outputclass="syntax javascript">s.products="widgets;large widget, 40′x40′;1;19.99,wugs;tiny wug;2;1,999.98";</codeblock>
    <p>In this implementation, the developer probably intended for 
		data collection to read this as shown below: 
	 </p>
    <p> Category 1: widgets 
	 </p>
    <p> Product 1: large widget, 40′x40′ 
	 </p>
    <p> Units 1: 1 
	 </p>
    <p> Revenue 1: 19.99 
	 </p>
    <p> Category 2: wugs 
	 </p>
    <p> Product 2: tiny wug 
	 </p>
    <p> Units 2: 2 
	 </p>
    <p> Revenue 2: 1,999.98 
	 </p>
    <p>Note the commas in the Product 1 and Revenue 2 entries. These indicate a
		new product entry. 
		Data collection would interpret the above as: 
	 </p>
    <p> Category 1: widgets 
	 </p>
    <p>Product 1: large widget 
	 </p>
    <p>Category 2: 40'x40' 
	 </p>
    <p>Product 2: 1 
	 </p>
    <p>Units 2: 19.99 
	 </p>
    <p>Category 3: wugs 
	 </p>
    <p>Product 3: tiny wug 
	 </p>
    <p>Units 3: 2 
	 </p>
    <p>Revenue 3: 1 
	 </p>
    <p>Category 4: 999.98 
	 </p>
    <p>A mistake like this often results in unexpected numerical values in the 
		<wintitle>Products</wintitle> report, because the units field is recorded
		as the product name. If you see invalid product names in your 
		<wintitle>Products</wintitle> report, review your 
		<wintitle>s.products</wintitle> variable implementation for misuse of
		reserved characters, like the comma. 
	 </p>
    <p> Your product and category names should not contain unsupported
		characters. This can be especially difficult in the 
		<wintitle>s.products</wintitle> string, because product names are often
		likely to contain characters such as ™, ©, and ®. These characters need to be
		stripped out of the product and category values before they are placed into 
		<wintitle>s.products</wintitle>. You also need to ensure that currency
		symbols are not included in your revenue values. Supported characters are
		numbers 1-127 from the ASCII table. 
	 </p>
    <p>If you are not passing a product category in the product string, make
		sure to include a semi-colon (;) where the product category is normally
		displayed, as shown below: 
		<codeblock outputclass="syntax javascript">s.products=";product name"</codeblock></p>
    <p>In this case, the semi-colon represents a placeholder for the product
		category. If the semi-colon is left out of the product string, then "product
		name" would be counted as the category, the number of units to be counted as
		the product name, the revenue to be counted as the units, and so on. 
	 </p>
  </conbody>
</concept>