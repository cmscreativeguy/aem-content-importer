<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_FBECA315D8904A5E931B4040AD51978A">
  <title>amc.on Tag Event Callbacks</title>
  <shortdesc>To avoid errors due to asynchronous tag loading and rare cases of
	 CDN unavailability, you should use the tag event callbacks provided by 
	 <codeph>amc.on</codeph> to wrap any code that depends on tags delivered by
	 tag management. 
  </shortdesc>
  <prolog>
    <metadata>
      <othermeta name="solution" content="Analytics" />
      <othermeta name="topic" content="Developer and implementation" />
      <othermeta name="subtopic" content="Tag management" />
    </metadata>
  </prolog>
  <conbody>
    <section id="section_75E1F43C5ABB4B5A994D0645B3C6BC4B">
      <title>Avoiding Availability Errors</title>
      <p>An 
		  <codeph>amc</codeph> object is defined in the tag management page code:
		  
		</p>
      <codeblock outputclass="syntax javascript">var amc=amc||{};if(!amc.on){amc.on=amc.call=function(){}};</codeblock>
      <p>Since this object is defined on the page, any code that is contained
		  in 
		  <codeph>amc.on</codeph> event callbacks fails silently if the tag
		  container does not load for any reason. 
		</p>
    </section>
    <section id="section_3AFE4C12BCD941A1A208C5C058DC9B3E">
      <title>Callback Events</title>
      <p>Instead of relying on browser execution order, tag management provides
		  an interface that lets you execute code based on tag events. This lets you
		  deliver tags asynchronously to optimize performance, and still execute
		  additional code after a tag loads or when other events occur. 
		</p>
      <p>Callbacks can be associated with the following events using 
		  <codeph>amc.on</codeph>: 
		</p>
      <table id="table_E2C243D6B6B046E6A060F4A60637567F">
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="4.85*" />
          <thead>
            <row>
              <entry colname="col1">Event name 
				  </entry>
              <entry colname="col2">Description 
				  </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">tagload 
				  </entry>
              <entry colname="col2"> Triggered when a tag has been loaded and
					 is ready to use. 
				  </entry>
            </row>
            <row>
              <entry colname="col1">tagappend 
				  </entry>
              <entry colname="col2"> Triggered when a tag is appended in the
					 page by tag management. 
				  </entry>
            </row>
            <row>
              <entry colname="col1">tagignore 
				  </entry>
              <entry colname="col2"> Triggered when by some unknown reason one
					 tag could not be append in the page. 
				  </entry>
            </row>
            <row>
              <entry colname="col1">pageload 
				  </entry>
              <entry colname="col2"> Triggered when the onload event is
					 triggered by the browser. 
				  </entry>
            </row>
            <row>
              <entry colname="col1">domcontentloaded 
				  </entry>
              <entry colname="col2"> Triggered when the DOMContentLoaded event
					 from the browser is triggered. 
				  </entry>
            </row>
            <row>
              <entry colname="col1">load 
				  </entry>
              <entry colname="col2"> Triggered when all the tags have been
					 loaded. 
				  </entry>
            </row>
            <row>
              <entry colname="col1">
                <p>tagload.tagid 
					 </p>
                <p>tagappend.tagid 
					 </p>
                <p>tagignore.tagid 
					 </p>
              </entry>
              <entry colname="col2">
                <p> For the events starting with tag (<codeph>tagload</codeph>,
						
						<codeph>tagappend</codeph>, 
						<codeph>tagignore</codeph>) hierarchical event names are
						supported. This means that the 
						<codeph>id</codeph> of the tag can be added after the event
						name. 
					 </p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <p>Don't confuse these events with the 
		  <codeph>DomContentLoaded</codeph> or the 
		  <codeph>onload</codeph> events from browser. These events can be
		  triggered before or after the events triggered by the browser. 
		</p>
      <p>Callback methods have the following syntax: 
		</p>
      <codeblock outputclass="syntax javascript">amc.on('eventname', function (event, data) {
});</codeblock>
      <p>Each callback method receives the following arguments: 
		</p>
      <ul id="ul_8D7CA5EB963C4F5E9854F503562DE184">
        <li id="li_1416CA500DF3463E9FDD0020469330D1">
          <b>event</b> - the event
			 name for which this callback will be processed. 
		  </li>
        <li id="li_7A4E3FAB4C9E4EDCB94BA39EC2B56EFD">
          <b>data</b> - an object
			 having the following structure: 
		  </li>
      </ul>
      <codeblock outputclass="syntax javascript">{
  id: 'tagid',
  tag: TagInstance
}</codeblock>
      <note> Any code using the 
		  <codeph>amc.on</codeph> method should be added in the page after the
		  page code. Code that depends on tags that are delivered by tag management
		  should not be placed in the 
		  <codeph>&lt;head&gt;</codeph> element. 
		</note>
    </section>
    <section id="section_E88A721DCA474E87BD5BE271547D7D8D">
      <title>Examples</title>
      <p>The following examples are based on a tag container that has 2
		  components: 
		</p>
      <p>
        <ul id="ul_CCAFF0B636514536B42E06A4D247E999">
          <li id="li_18CEFDC9A53349BF834E6CC945F64138"> Analytics - with the id
			 'analytics' 
		  </li>
          <li id="li_0C65D9503A30483DBD14A9D18F3B1754">Target - with the id
			 'testandtarget' 
		  </li>
        </ul>
      </p>
      <p>
        <b>Load</b>
      </p>
      <codeblock outputclass="syntax javascript">amc.on('load', function (event, data) {
	// Here we can add code that will be triggered once all the tags have been loaded by tag management.
 // For  set eVars, props, events, and then call s.t(). You can also do this directly
 // in tagmanager UI if you don't need page elements
});</codeblock>
      <p>
        <b>Tag Load</b>
      </p>
      <codeblock outputclass="syntax javascript">amc.on('tagload', function (event, data) {
//called twice. Once for Analytics, and once for Target
});</codeblock>
      <p>You can find out the component for which the event was triggered by
		  looking at the data object. This callback is for advanced users who need
		  complex functionality. For example, you might have 10 tags to add in the page,
		  but want to define an action when only 3 of them are loaded, independent of the
		  other 7. 
		</p>
      <p>
        <b>Specific Tag Loaded</b>
      </p>
      <codeblock outputclass="syntax javascript">amc.on('tagload.analytics', function (matchedmessage, data) {
 });</codeblock>
      <p> This callback is triggered when the tag with the ID of 
		  <codeph>analytics</codeph> has been loaded by the browser. This is the
		  same as placing the code in the 
		  <uicontrol>On Load</uicontrol> section of the Analytics tag in the tag
		  management UI (assuming your Analytics tag has an id of
		  '<codeph>analytics</codeph>'). 
		</p>
      <p>For example, if you need to place code that is dependent on Analytics
		  in the Target tag, you can add code similar to the following in the 
		  <uicontrol>On Load</uicontrol> section of the Target tag: 
		</p>
      <codeblock outputclass="syntax javascript">var mboxServerHost='omniture.tt.omtrdc.net;'
(function mboxOnLoad() {

    //place code here that will run after Target is loaded

})();

amc.on('tagload.analytics', function () {
  //place code here that will run after Analytics and Target are loaded
});</codeblock>
      <p>
        <b>Nested DOM Content Loaded within the Analytics Tag</b>
      </p>
      <p>If you need to call 
		  <codeph>s.t</codeph> on the page instead of within the 
		  <uicontrol>On Load</uicontrol> section in the Analytics tag, the call
		  should be contained within two callbacks. The first when the Analytics tag is
		  loaded, and the second when the DOM is loaded: 
		</p>
      <codeblock outputclass="syntax javascript">amc.on('tagload.analytics', function (matchedmessage, data) {
	amc.on('domcontentloaded', function () {
		if (s) {
			s.pageName = document.getElementById('pagetitle').innerHTML;
			s.t();
		}
	});
});</codeblock>
      <p>This method is used if you need to interact with the DOM before making
		  the tracking call. 
		</p>
    </section>
  </conbody>
</concept>