<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_B016789733A94070A9EAB209EEC05262"> 
  <title>Dynamic Variables</title> 
  <shortdesc>Dynamic variables let you copy values from one variable to another
	 without typing the full values multiple times in the image requests on your
	 site. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/> 
		<othermeta name="subtopic" content="Variables"/> </metadata>
  </prolog> 
  <conbody> 
	 <p>Dynamic variables are used when capturing the same data (for example,
		campaign tracking codes) in multiple variables concurrently. This is a common
		practice in cases where different reports offer unique and important metrics.
		For example, capturing internal search keywords in a 
		<wintitle>Custom Conversion</wintitle> variable and in a 
		<wintitle>Custom Traffic</wintitle> variable lets you view the 
		<wintitle>Revenue</wintitle> and the 
		<wintitle>Weekly Unique Visitors</wintitle> metrics associated with these
		keywords, respectively 
	 </p> 
	 <p>Dynamic variables are also useful for viewing data under various
		reporting conditions. A campaign tracking code can be captured in multiple
		eVars with various allocation and cookie expiration settings. This lets users
		choose the way they want to attribute conversion metrics to these campaigns. 
	 </p> 
	 <p>A significant benefit of dynamic variables is the ability to capture
		long strings of data in multiple variables without actually passing the long
		string repeatedly. Some browsers limit the maximum length of HTTP GET requests
		(including the Adobe image request). Using dynamic variables ensures that all
		data is captured by reducing the length of the request to Adobe servers in
		cases where data is duplicated across several variables. 
	 </p> 
	 <p>In the Adobe image request that occurs on the page view, if you are
		using dynamic variables to copy the value of 
		<wintitle>Custom Traffic 1</wintitle> to 
		<wintitle>Custom Conversion 1</wintitle>, you would see 
		<codeph>v1=D=c1</codeph>. If eVar1 received a value previously in the
		request, Adobe's servers dynamically copy the value of 
		<wintitle>Custom Traffic 1</wintitle> to 
		<wintitle>Custom Conversion 1</wintitle> during data processing. As a
		result, the value originally passed using 
		<wintitle>Custom Traffic 1</wintitle> also appears in the 
		<wintitle>Custom Conversion 1</wintitle> reports. 
	 </p> 
	 <p>Dynamic variables are passed by setting a variable to the desired value
		and then setting other variables to 
		<codeph>D=[variable abbreviation]</codeph>. For abbreviations for each
		variable, see 
		<xref
		href="query_parameters.xml#concept_2F280ECF4205465FA9B5D773046C1A15"
		format="dita" scope="local"><?xm-replace_text Query Parameters?></xref>.
		Dynamic variables can pull data from the following locations: 
	 </p> 
	 <ul id="ul_03259744667B4435B9FB2A2C41A430A0"> 
		<li id="li_A00847510B5E4FE08C5BC276A684752E">Other query-string variables
		  
		</li> 
		<li id="li_D0B5E9A011744A42885C499677AB313D">HTTP headers (except for the
		  Cookie HTTP header) 
		</li> 
	 </ul> 
	 <p> To create a dynamic variable, add a special prefix to the start of the
		value. The default prefix is "D=". There are two methods of flagging dynamic
		variables: 
	 </p> 
	 <ul id="ul_1F328A11EE7D443F8C65B13C531B77CB"> 
		<li id="li_F5147BAADDAD485D8951BBCFD92B60D0">Use a default prefix of D=
		  (For example: s.prop1="D=User-Agent" ) 
		</li> 
		<li id="li_8A2AE8243E6149A8B2F1BFBAAC0479AE">For non-JavaScript
		  implementations, you can define a custom prefix using the "D" query-string
		  parameter. For example, if the query-string parameter is 
		  <codeph>"&amp;D=$"</codeph>, you can create a dynamic variable with the
		  following command: 
		  <codeph>s.prop1="$User-Agent"</codeph> . 
		</li> 
	 </ul> 
	 <p>The variable abbreviation used must match the variable parameter name
		passed in the image request. Some variables have multiple accepted parameters
		used in different cases. For example, 
		<codeph>pageName=</codeph> and 
		<codeph>gn=</codeph> both pass the page name, but the latter is most
		often used in mobile and hard-coded implementations. If the image request uses 
		<codeph>pageName=</codeph> to pass the page name, then 
		<codeph>D=pageName</codeph> is acceptable but 
		<codeph>D=gn</codeph> is not. If the image request uses 
		<codeph>gn=</codeph>, then 
		<codeph>D=gn</codeph> is acceptable, but 
		<codeph>D=pageName</codeph> is not. 
	 </p> 
	 <p>The following information applies to dynamic variables: 
	 </p> 
	 <ul id="ul_0993914F635B4CCE933BA5BBCCE4F0DE"> 
		<li id="li_99ACFC0FFD054AFF8AABCE554DA44A08">Dynamic variables work with
		  all versions of 
		  <keyword>AppMeasurement</keyword> code. 
		</li> 
		<li id="li_481A218569684FAAA3547ADAC88D86AB">Dynamic variables are case
		  sensitive. 
		</li> 
		<li id="li_17A2CA431F1248F0B28512631D817455">Dynamic variables support
		  literal strings contained in quotes. 
		</li> 
		<li id="li_F2F592F11EA940A98EA47AEBC033274E">Dynamic variable replacement
		  occurs before processing rules, VISTA, and other processing.
		</li>
		<li id="li_1BACAA8D971A4ECA96EBE46C70A6ED0F">The dynamic variable prefix
		  "D=" must be at the start of the variable value not in the middle. For example,
		  use 
		  <codeph>c2=D="test7"+User-Agent</codeph> rather than 
		  <codeph>c2="test7"+D=User-Agent</codeph> . 
		</li> 
		<li id="li_845E7697CFAC4ED59C6A7A71A5E1DC18">As with all implementation
		  techniques, Adobe strongly recommends testing dynamic variable implementations
		  heavily in a development environment before deploying to production. Because
		  the full strings that are copied are not visible in client-side debugging
		  tools, review the affected 
		  <keyword>Analytics</keyword> reports to confirm successful
		  implementation. 
		</li> 
		<li id="li_34EE2DC0335D446E87F203DAFB694D5D">When copying values between
		  variables with different maximum lengths, note that copying a value that
		  exceeds the maximum length of the destination variable causes truncation. For
		  example, 
		  <wintitle>Custom Traffic</wintitle> variables have 100-character limits
		  and 
		  <wintitle>Custom Conversion</wintitle> variables have 255-characters
		  limits. When copying a 150-character value from 
		  <filepath>s.eVar1</filepath> to 
		  <filepath>s.prop1</filepath> using dynamic variables, this value is
		  truncated in the 
		  <wintitle>Custom Traffic</wintitle> report at 100 characters. 
		</li> 
	 </ul> 
  </conbody> 
</concept> 
