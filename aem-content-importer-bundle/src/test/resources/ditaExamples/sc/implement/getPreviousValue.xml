<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_97FF118A3F2F4509AE566980E189325F"> 
  <title>getPreviousValue</title> 
  <shortdesc> Captures the value of a 
	 <keyword>Analytics</keyword> variable on the next page view. For example,
	 you can use plug-in to capture the 
	 <varname>s.pageName</varname> value from the previous page view into a
	 Custom Traffic variable. It also has an option to capture a previous value only
	 when designated success events are set. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/> 
		<othermeta name="subtopic" content="Plug-ins"/> </metadata>
  </prolog> 
  <conbody> 
	 <note>The following instructions require you to alter the data collection
		code on your site. This can affect data collection on your site, and should
		only be done by a developer with experience using and implementing 
		<keyword>Analytics</keyword>. 
	 </note> 
	 <section id="section_92E94A96A4764113B5588F1B83E3DE2C"> 
		<title>Plug-in Code and Implementation</title> 
		<p> 
		  <b>CONFIG SECTION</b>: No changes required for this section. 
		</p> 
		<p> 
		  <b>Plug-in Configuration</b> 
		</p> 
		<p>Place the following code within the 
		  <varname>s_doPlugins()</varname> function, which is located in the area
		  of the 
		  <varname>s_code.js</varname> file labeled 
		  <i>Plugin Config</i>. Choose one Custom Traffic (s.prop) variable or
		  one Custom Conversion (s.eVar) variable for use in capturing persisted value
		  data. This should be a variable that has been enabled using the Admin Console,
		  but which is not currently in use for any other purpose. You can use the
		  following example and update it based on your requirements. 
		</p> 
		<p> 
		  <codeph>s.prop1=s.getPreviousValue(s.pageName,'gpv_pn','event1');</codeph>
		  
		</p> 
		<p> 
		  <varname>s.getPreviousValue</varname> has three arguments: 
		</p> 
		<ol id="ol_2B8B7A54792B49218485493AB7CDF265"> 
		  <li id="li_12A61EE402DC4478B224CD90DCD4EDC7">The variable to be
			 captured from the previous page (<varname>s.pageName</varname> above). 
		  </li> 
		  <li id="li_D60A766A60E84B4DB5B700249ACF7324">The cookie name for use in
			 storing the value for retrieval (<varname>gpv_pn</varname> above). 
		  </li> 
		  <li id="li_AFE58638DB3045EB868CD38C995BEB30">The events that must be
			 set on the page view in order to trigger the retrieval of the previous value
			 (<varname>event1</varname> above). When left blank or omitted, the plug-in
			 captures the previous value on all page views. 
		  </li> 
		</ol> 
		<p> 
		  <b>PLUGINS SECTION</b>: Add the following code to the area of the 
		  <filepath>s_code.js</filepath> file labeled PLUGINS SECTION. Do not
		  make any changes to this portion of the plug-in code. 
		</p> 
		<codeblock outputclass="syntax javascript">/*
 * Plugin: getPreviousValue_v1.0 - return previous value of designated
 *   variable (requires split utility)
 */
s.getPreviousValue=new Function("v","c","el",""
+"var s=this,t=new Date,i,j,r='';t.setTime(t.getTime()+1800000);if(el"
+"){if(s.events){i=s.split(el,',');j=s.split(s.events,',');for(x in i"
+"){for(y in j){if(i[x]==j[y]){if(s.c_r(c)) r=s.c_r(c);v?s.c_w(c,v,t)"
+":s.c_w(c,'no value',t);return r}}}}}else{if(s.c_r(c)) r=s.c_r(c);v?"
+"s.c_w(c,v,t):s.c_w(c,'no value',t);return r}");
/*
 * Utility Function: split v1.5 - split a string (JS 1.0 compatible)
 */
s.split=new Function("l","d",""
+"var i,x=0,a=new Array;while(l){i=l.indexOf(d);i=i&gt;-1?i:l.length;a[x"
+"++]=l.substring(0,i);l=l.substring(i+d.length);}return a");
</codeblock> 
		<p> 
		  <b>Notes</b> 
		<ul id="ul_851CDA289DAE43A38AA87D2D53020408"> 
		  <li id="li_FD51A3C0A5D741BDBD73ACE6D0C3D670">Always test plug-in
			 installations extensively to ensure that data collection is as expected before
			 deploying in a production environment. 
		  </li> 
		  <li id="li_655E612299EE47589317C6177D0E4388">If no value is present for
			 the selected variable on any given page, the text 
			 <i>no value</i> will be set in the cookie. 
		  </li> 
		  <li id="li_95ADDFB0C68A4EA6ACA3DCB26DEB21C9">A fixed 30-minute cookie
			 expiration is now set for each cookie, and refreshed with each page load. The
			 plug-in works for the length of a visit. 
		  </li> 
		  <li id="li_7142F8C9AB534506AF0525595A72FA6F">Because the function must
			 be called as part of the plug-ins section of code, the code runs each time 
			 <varname>s.t()</varname> or 
			 <varname>s.tl()</varname> is called. 
		  </li> 
		  <li id="li_1B424829096340C88C37E844DCAB5FDE">The chosen variable should
			 be populated with a value prior to the call to 
			 <varname>s.getPreviousValue</varname>. Because the 
			 <varname>s_doPlugins()</varname> function is executed after the
			 variables on the page are populated, this issue rarely occurs. It should only
			 be a matter of concern if the variable used with this plug-in is populated
			 within the 
			 <varname>s_doPlugins()</varname> function and after the call to 
			 <varname>s.getPreviousValue</varname>. 
		  </li> 
		</ul> 
		</p> 
	 </section> 
  </conbody> 
</concept>
