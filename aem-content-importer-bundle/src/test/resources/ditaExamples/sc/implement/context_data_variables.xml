<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_345BE0939CEA4C4EB7B2885BA16A65CF"> 
  <title>Context Data Variables</title> 
  <shortdesc>Context data variables let you define custom variables on each
	 page that can be read by processing rules. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/> 
		<othermeta name="subtopic" content="Variables"/> </metadata>
  </prolog> 
  <conbody> 
	 <p>Instead of explicitly assigning values to props and eVars in your code,
		you can send data in context data variables that are mapped using processing
		rules. Processing rules provide a powerful graphical interface to make changes
		to data as it is received. Based on the values sent in context data, you can
		set events, copy values to eVars and props, and execute additional conditional
		statements. 
	 </p> 
	 <p>Using context data helps prevent you from making code updates to support
		different report suite configurations. 
	 </p> 
	 <p>For example, you can define the following 
		<varname>s.contextData</varname> variable: 
	 </p> 
	 <p> 
		<codeblock>s.contextData['myco.rsid'] = 'value'</codeblock> 
	 </p> 
	 <p>Using processing rules you can add a condition that checks for a 
		<codeph>myco.rsid</codeph> context data variable. When this variable is
		found, you can add an action to copy it to a prop or eVar. 
	 </p> 
	 <p>Context data variables can also be defined directly in the processing
		rules interface to temporarily store a value, or to collect values from a
		context data variable you know will be used on the report suite. For example,
		if you need to swap two values, you could create a context data variable to
		store a value during the swap. 
	 </p> 
	 <p>Since processing rules are applied only when data is collected, it is
		important to set up processing rules before you start sending context data.
		Context data values that are not read by processing rules when a hit is
		processed are discarded. 
	 </p> 
	 <section id="section_2229739F6B1A4C1CAD7140BDF4687523"> 
		<title>Rules</title> 
		<table id="table_4433A32A952340699B189CAEAF158B06"> 
		  <tgroup cols="2"> 
			 <colspec colnum="1" colname="col1" colwidth="1.00*"/> 
			 <colspec colnum="2" colname="col2" colwidth="2.09*"/> 
			 <thead> 
				<row> 
				  <entry colname="col1"> 
					 <p>Rule 
					 </p> 
				  </entry> 
				  <entry colname="col2"> 
					 <p>Description 
					 </p> 
				  </entry> 
				</row> 
			 </thead> 
			 <tbody> 
				<row> 
				  <entry colname="col1"> 
					 <p>Supported names and characters 
					 </p> 
				  </entry> 
				  <entry colname="col2"> 
					 <p>Context data variable names can contain only alphanumeric
						characters, underscores and dots. Any additional characters are stripped out.
						Context cata variables do not have a numeric designation. Rather, they are
						named. 
					 </p> 
					 <p>For example, the context data variable 
						<codeph>login_page-home</codeph> automatically becomes 
						<codeph>login_pagehome</codeph>. All data sent to the 
						<codeph>login_page-home</codeph> variable is allocated under 
						<codeph>login_pagehome</codeph>. 
					 </p> 
				  </entry> 
				</row> 
				<row> 
				  <entry colname="col1"> 
					 <p>Namespace 
					 </p> 
				  </entry> 
				  <entry colname="col2"> 
					 <p>A good practice is to prefix your variables with your
						company name, site name, or a similar value to make sure the name is unique
						across your report suite. 
					 </p> 
					 <p>Context data variables can be named similar to other
						JavaScript variables. Be aware that the namespace 
						<codeph>a.*</codeph> is reserved for use by Adobe products in
						context variable names. For example, the AppMeasurement Library for iOS uses 
						<codeph>a.InstallEvent</codeph> to measure application
						installations. 
					 </p> 
				  </entry> 
				</row> 
				<row> 
				  <entry colname="col1"> 
					 <p>URL Limits 
					 </p> 
				  </entry> 
				  <entry colname="col2"> 
					 <p>When using context data variables on the Web, be aware of
						the URL limits of browsers. For example, IE truncates URLs at 2000 bytes. You
						can use the 
						<keyword>DigitalPulse</keyword> debugger to determine the
						size of a URL string. 
					 </p> 
				  </entry> 
				</row> 
				<row> 
				  <entry colname="col1"> 
					 <p>Supported AppMeasurement version 
					 </p> 
				  </entry> 
				  <entry colname="col2"> 
					 <p>Context data variables require at least H23 code or higher. 
					 </p> 
				  </entry> 
				</row> 
			 </tbody> 
		  </tgroup> 
		</table> 
	 </section> 
	 <section id="section_35EBE5D1CF29427598BD4B2165CE64FC"> 
		<title>Sending Context Data on a Track Link Call</title> 
		<p>Include 
		  <codeph>ContextData</codeph> + the name of the variable that you would
		  like included in 
		  <codeph>s.linkTrackVars</codeph>: 
		</p> 
		<codeblock>s.contextData['myco.value'] = "some value";
s.linkTrackVars = "contextData.myco.value";
s.tl(true,"o","Link Name");
</codeblock> 
	 </section> 
	 <section id="section_A16AD9E6E0E84F6A85CA4F08512480B3"> 
		<title>Examples</title> 
		<p>Possible ways to replace implementation of the 
		  <varname>s.pageName</varname> variable, assuming that processing rules
		  are set up correctly for each: 
		</p> 
		<codeblock>
s.contextData['page'] = "Home Page"
s.contextData['pagename'] = document.title // Takes the web page's title and passes it into the pageName context data variable
s.contextData['pagevar'] = s.pageName // This example would be considered redundant, as both the pageName and contextData variable are available in Processing rules</codeblock> 
		<p>Other examples to implement context data variables: 
		</p> 
		<codeblock>s.contextData['owner'] = "Jesse"
s.contextData['campaign'] = "Campaign A"
s.contextData['author'] = "Sheridan Andrius"</codeblock> 
		<p>For an example, see 
		  <xref
		  href="https://marketing.adobe.com/resources/help/en_US/reference/?f=processing_rules_copy_context_data"
		  format="http" scope="external">Copy a Context Data Variable to an eVar</xref>
		  in Analytics Reference. 
		</p> 
	 </section> 
  </conbody> 
</concept> 
