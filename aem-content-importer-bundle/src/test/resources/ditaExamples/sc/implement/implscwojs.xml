<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_D843C4E4D6824C19878156DA15FD08FE"> 
  <title>Implementing Analytics without JavaScript</title> 
  <shortdesc> Data collection is usually implemented using an HTML image tag
	 that is created using JavaScript. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/>
		</metadata>
  </prolog> 
  <conbody> 
	 <p>The browser then requests the image. Data moves with this image request
		via variables in the query string of the image request. The JavaScript combines
		browser-level variables with page-level variables for a comprehensive data
		collection solution. In some cases, a fully server-created image tag is
		appropriate. The standard elements of a JavaScript-based implementation are
		listed as follows: 
	 </p> 
	 <table id="table_20BBE4387F234CF199E6C99741AF265C"> 
		<tgroup cols="2"> 
		  <colspec colnum="1" colname="col1" colwidth="1.00*"/> 
		  <colspec colnum="2" colname="col2" colwidth="2.18*"/> 
		  <tbody> 
			 <row> 
				<entry> HTML Code 
				</entry> 
				<entry> This portion consists of JavaScript code that is placed in
				  HTML pages (or templates) that set the value of JavaScript variables. 
				</entry> 
			 </row> 
			 <row> 
				<entry> JavaScript Library 
				</entry> 
				<entry> 
				  <p>This file contains common code that: 
				  </p> 
				  <ul id="ul_ED50D66F2B2B476E8D9063099995998D"> 
					 <li id="li_E88F6F28EC8946469ADCEAFF2F0A4EBA">Queries the
						browser about various properties, such as JavaScript version, OS version, the
						size and resolution of monitor being used, and other variables 
					 </li> 
					 <li id="li_5CEBE37709D943B7921447FA7054A565">Encodes and
						concatenates all the variables into an image request (&lt;img&gt;) that
						transports these variables to the data collection servers. It then references a
						JavaScript library file which is loaded and executed. 
					 </li> 
				  </ul> 
				</entry> 
			 </row> 
			 <row> 
				<entry> &lt;noscript&gt; tag 
				</entry> 
				<entry> A simplified version of the image request is placed within
				  a &lt;noscript&gt; tag that executes if the user has disabled JavaScript, or
				  does not have JavaScript capabilities. This part of the implementation is
				  optional and generally applies to approximately 2% of the Internet population. 
				</entry> 
			 </row> 
		  </tbody> 
		</tgroup> 
	 </table> 
	 <p>JavaScript can detect browser settings that are not available to a
		server, such as browser window height/width, monitor resolution, and Netscape
		plug-ins. By using a server-side method to create an image tag, these variables
		cannot be captured. The JavaScript sets a random number in the image request to
		overcome browser and proxy server caching. This allows all page views to be
		accurately tracked. In certain situations, server-side code has advantages over
		the JavaScript-based code, including the following: 
	 </p> 
	 <ul id="ul_81DBD9DAF1EC403799048141A2C795F3"> 
		<li id="li_906CB849AEFE4B01A569A2D11C779D1D">JavaScript is very accurate
		  (98-100%). There are times when the utmost accuracy is desired, even in
		  situations where a user quickly clicks to another page before the JavaScript
		  has executed. Creating the image tag server-side increases the accuracy level
		  by several percentage points. 
		</li> 
		<li id="li_BB67880D4679446796E451576391EB5C">For tracking conversion
		  events, such as purchases, where accuracy is very important. 
		</li> 
		<li id="li_31F89B6F88B24B06820752D046477F2E"> This strategy may also be
		  used to fully populate the image request within the &lt;noscript&gt; tag for
		  tracking users without JavaScript, or with JavaScript disabled. 
		</li> 
	 </ul> 
	 <p> 
		<note>The use of server-generated image tags requires additional time to
		  implement, and is more difficult to debug, deploy, and maintain. Adobe strongly
		  encourages clients to use JavaScript-based data collection on every page where
		  possible. Various reports and features, including visitor click map, download
		  links, exit links, and browser-based variables (browser width/height, etc.)
		  cannot be collected or supported using this implementation method. 
		</note> 
	 </p> 
  </conbody> 
</concept> 
