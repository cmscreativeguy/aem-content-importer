<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_991E33FADDC4467E895341FF412A2BDE">
  <title>Collecting Data From Form Elements</title>
  <shortdesc>
    You can capture the values of form
	 elements, such as radio button and checkbox items, into reports. This helps you
	 analyze the most popular choices in your online forms. 
  </shortdesc>
  <prolog>
    <metadata>
      <othermeta name="solution" content="Analytics" />
      <othermeta name="topic" content="Developer and implementation" />
    </metadata>
  </prolog>
  <conbody>
    <p> For example, if you had a radio button letting the user specify his or
		her favorite genre of music (such as rock, rap, classical, or jazz), you could
		capture this response in a variable to determine the overall music preferences
		of your user base. 
	 </p>
    <p> The best way to capture this data depends on how your forms are
		processed. It also depends on whether the form selections you want to capture
		are available in the query string on the page following the form submission.
		Examples in this article are given in PHP. However, you can adapt these
		concepts to another language, depending on your server environment. 
	 </p>
    <p> This information is suited for advanced 
		users who are well-versed in both
		reporting and implementation. Do not attempt to make any edits to your
		implementation without complete knowledge of its consequences. If you require
		implementation changes, contact your organization's Account Manager. 
	 </p>
    <section id="section_7A2B35822BFF4F6EB57940B31AE6303A">
      <title>GET Method</title>
      <p> If your form uses a 
		  <wintitle>GET</wintitle> method to submit data, you have access to the
		  desired data in the query string of the URL on the page following form
		  submission. You can use the 
		  <wintitle>getQueryParam</wintitle> plug-in to capture this data out of
		  the query string automatically and place it into the 
		  variable of your choosing. 
		</p>
    </section>
    <section id="section_56715C30EF374BA7AA12B946B50E4A9A">
      <title>POST Method</title>
      <p> If your form uses a 
		  <wintitle>POST</wintitle> method to submit data (which is more common),
		  you have the results for each specific form element available to you in the 
		  <wintitle>$_POST superglobal</wintitle>. To capture this in a 
		  variable, you want to
		  determine the form element name in question. Using the music genre example
		  mentioned before, part of the form element in question look like this: 
		</p>
      <codeblock outputclass="syntax html">&lt;input type="radio" name="music_genre" value="rock"&gt;</codeblock>
      <p> This radio button belongs to the "music_genre" form element. You then
		  have access to the user's selected value by using $_POST['music_genre']. This
		  can be written to a 
		  variable on the page following the form
		  submission: 
		</p>
      <codeblock outputclass="syntax javascript">s.eVar1="&lt;?=$_POST['music_genre'];?&gt;"</codeblock>
      <p>The 
		  <wintitle>eVar1</wintitle> variable receives a copy of whatever value
		  was submitted to your server through the form, as specified in the value=
		  property. 
		</p>
      <p> If you need additional information regarding this custom
		  implementation method, contact your organization's Account Manager. They can
		  arrange a meeting with one of our Implementation Consultants to provide the
		  help you need. 
		</p>
    </section>
  </conbody>
</concept>