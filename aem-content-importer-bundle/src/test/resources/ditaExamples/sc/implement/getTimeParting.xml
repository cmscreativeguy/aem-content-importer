<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_3746EA1D1EF746049AE84105B911F44A"> 
  <title>getTimeParting</title> 
  <shortdesc>The 
	 <varname>getTimeParting</varname> plug-in populates reports with hour of
	 day, day of week, and weekend and weekday values. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/> 
		<othermeta name="subtopic" content="Plug-ins"/> </metadata>
  </prolog> 
  <conbody> 
	 <p>This plug-in is useful in performing analysis based on the time of day
		or day of week. It can help to answer the following questions: 
	 </p> 
	 <ul id="ul_6D232779BDEC4AA5A6E34E81B52A77A9"> 
		<li id="li_C182FC5E128A4F1DB3043A746C510017">Across a large date range,
		  what is the most popular time of day for visitors to access my site? 
		</li> 
		<li id="li_E48A1DE0A1EA4EAC950194CFC9DD4D9F">Are there days of the week
		  on which conversion is higher on my site? 
		</li> 
		<li id="li_1457167BC5D943459865FC8CA0E27D38">How do my weekend sales
		  compare to my weekday sales? 
		</li> 
		<li id="li_8980EA09B5504E78843682C3588BC845">Does a certain marketing
		  campaign generate higher conversions in the morning, or in the afternoon? 
		</li> 
	 </ul> 
	 <p>This plug-in captures the date and time information available in the
		user's web browser. It obtains the hour of the day and the day of the week from
		this information. It then converts this data to the time zone of your choosing.
		It also accounts for Daylight Savings Time. 
	 </p> 
	 <note>The following instructions require you to alter the data collection
		code on your site. This can affect data collection on your site, and should
		only be done by a developer with experience using and implementing 
		<keyword>Analytics</keyword>. 
	 </note> 
	 <section id="section_1390D6FA53BE4C40B748B0C0AE09C4FA"> 
		<title>Plug-in Code</title> 
		<p> 
		  <b>Config Section</b> 
		</p> 
		<p>Place the following code in the area of the 
		  <filepath>s_code.js</filepath> file labeled 
		  <wintitle>CONFIG SECTION</wintitle>, and make the necessary updates as
		  described below. 
		</p> 
		<p><codeph> s._tpDST</codeph> - an array of DST values. The array is
		  structured in the following format: 
		  <codeph>YYYY:'MM/DD,MM/DD'</codeph> 
		</p> 
		<codeblock outputclass="syntax javascript">//time parting configuration
//Australia
s._tpDST = {
2012:'4/1,10/7',
2013:'4/7,10/6',
2014:'4/6,10/5',
2015:'4/5,10/4',
2016:'4/3,10/2',
2017:'4/2,10/1',
2018:'4/1,10/7',
2019:'4/7,10/6'}
 
//US
s._tpDST = {
2012:'3/11,11/4',
2013:'3/10,11/3',
2014:'3/9,11/2',
2015:'3/8,11/1',
2016:'3/13,11/6',
2017:'3/12,11/5',
2018:'3/11,11/4',
2019:'3/10,11/3'}
 
//Europe
s._tpDST = {
2012:'3/25,10/28',
2013:'3/31,10/27',
2014:'3/30,10/26',
2015:'3/29,10/25',
2016:'3/27,10/30',
2017:'3/26,10/29',
2018:'3/25,10/28',
2019:'3/31,10/27'}</codeblock> 
		<p>Note for Northern Hemisphere clients: in the array DST values are DST
		  start, DST end. 
		</p> 
		<p>Note for Southern Hemisphere clients: in the array DST values are DST
		  end, DST start. 
		</p> 
		<p><b>Parameters</b> 
		</p>
		<codeblock outputclass="syntax javascript">var tp = s.getTimeParting(h,z);</codeblock> 
		<ul id="ul_B6F525CA04C24969861B0E9DA6265A76"> 
		  <li id="li_E2468ED2035640819A7E1225E217C286">h = (required) Hemisphere
			 - Specify what hemisphere you are converting the time to. This is a value of
			 'n' or 's'. This is used to determine how to use the DST array passed. If 'n'
			 is passed the plugin uses the dates when DST is on. If 's' is passed the plugin
			 uses the dates when DST is off. 
		  </li> 
		  <li id="li_2134832919824D76B3363DB5DB54A0AB">z = (optional) Time Zone -
			 If you would like the data to be based upon a specific time period, then that
			 will need to be specified as the hours different from GMT here. Note this
			 should be the GMT during non DST. If no value is specified, it defaults to GMT
			 (i.e. '-5' for US Eastern Time) 
		  </li> 
		</ul> 
		<p><b>Returns</b> 
		</p> 
		<p>Returns a concatenated value of time at minute level and day of week,
		  for example: 
		</p> 
		<codeblock>8:03 AM|Monday</codeblock> 
		<p>You can then use 
		  <xref
		  href="https://marketing.adobe.com/resources/help/en_US/reference/?f=classifications#"
		  format="dita" scope="local">Classifications</xref> to group visits into time
		  periods. For example, you could set up a rule in Classification Rule Builder to
		  bucket visits between 9:00 AM and 9:59 AM to "9:00 AM - 10:00 AM". As an
		  alternative to classifications, you could provide additional client-side logic
		  to bucket visits in JavaScript. 
		</p> 
		<p><b>Example Call</b> 
		</p> 
		<codeblock outputclass="syntax javascript">var tp = s.getTimeParting('n','-7');
s.prop1 = tp;</codeblock> 
		<p> 
		  <b>PLUGINS SECTION</b> 
		</p> 
		<p>Add the following code to the 
		  <wintitle>PLUGINS SECTION</wintitle> in the 
		  <filepath>s_code.js</filepath> file. 
		</p> 
		<codeblock outputclass="syntax javascript">
/*
 * Plugin: getTimeParting 3.4
 */
s.getTimeParting=new Function("h","z",""
+"var s=this,od;od=new Date('1/1/2000');if(od.getDay()!=6||od.getMont"
+"h()!=0){return'Data Not Available';}else{var H,M,D,U,ds,de,tm,da=['"
+"Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturda"
+"y'],d=new Date();z=z?z:0;z=parseFloat(z);if(s._tpDST){var dso=s._tp"
+"DST[d.getFullYear()].split(/,/);ds=new Date(dso[0]+'/'+d.getFullYea"
+"r());de=new Date(dso[1]+'/'+d.getFullYear());if(h=='n'&amp;&amp;d&gt;ds&amp;&amp;d&lt;de)"
+"{z=z+1;}else if(h=='s'&amp;&amp;(d&gt;de||d&lt;ds)){z=z+1;}}d=d.getTime()+(d.getT"
+"imezoneOffset()*60000);d=new Date(d+(3600000*z));H=d.getHours();M=d"
+".getMinutes();M=(M&lt;10)?'0'+M:M;D=d.getDay();U=' AM';if(H&gt;=12){U=' P"
+"M';H=H-12;}if(H==0){H=12;}D=da[D];tm=H+':'+M+U;return(tm+'|'+D);}");</codeblock> 
		<p> 
		  <b>Notes</b> 
		</p> 
		<ul id="ul_6931233313D142EBA6CC2B650740BB16"> 
		  <li id="li_BDB09A4BC3224C37A29E1A5C7C91742B">Always test plug-in
			 installations to ensure that data collection is as expected before deploying to
			 production. 
		  </li> 
		  <li id="li_CF224EE9F943476797DB68859FF287AE">Configuration variables
			 must be set for plugin to work correctly. 
		  </li> 
		</ul> 
	 </section> 
  </conbody> 
</concept> 
