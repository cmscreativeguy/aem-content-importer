<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_E3D0FEC81E1F4987B39CC467F19FFCFF"> 
  <title>getValOnce</title> 
  <shortdesc>The getValOnce plug-in prevents a given variable from being set to
	 the previously defined value. It uses a cookie to determine a variable's last
	 seen value. If the current value matches the cookie value, the variable is
	 overwritten with a blank string before it is sent to Adobe's processing
	 servers. This plug-in is useful to prevent conversion variable instance
	 inflation caused when users refresh the page or click the Back button. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/> 
		<othermeta name="subtopic" content="Plug-ins"/> </metadata>
  </prolog> 
  <conbody> 
	 <note type="important">This plug-in has not been validated to be compatible
		with 
		<xref href="appmeasure_mjs.xml#concept_F3957D7093A94216BD79F35CFC1557E8"
		 format="dita" scope="local">AppMeasurement for JavaScript</xref>. See 
		<xref href="plugins_support.xml#concept_E31A189BC8A547738666EB5E00D2252A"
		 format="dita" scope="local"><?xm-replace_text AppMeasurement Plug-in Support?></xref>.
		
	 </note> 
	 <p> 
		<b>Parameters</b> 
	 </p> 
	 <codeblock outputclass="syntax javascript">s.eVar1=s.getValOnce(variable,cookie,expiration,minute);</codeblock> 
	 <ul id="ul_FD566DCB894E4C0D943B73D13689290C"> 
		<li id="li_2AC2CC56FC144EE98FB3FF998C7A3CDE"> 
		  <b>Variable:</b> The variable that will be checked. This is typically
		  the same as the variable being defined. 
		</li> 
		<li id="li_1CFD94BD79BD4ADC8F0B7C6F33CDEB5C"> 
		  <b>Cookie:</b> The name of the cookie that stores the previous value to
		  compare against. The cookie can be any value. 
		</li> 
		<li id="li_34173CA3020E49BFBD0FBC91E162D65F">(Optional) 
		  <b>Expiration:</b> The number of days the cookie will expire. If not
		  set or set to 0, the default expiration is the browser session. 
		</li> 
		<li id="li_744B142A89C24E8A9AD11A56A932EA4B">(Optional) 
		  <b>Minute:</b> If you set this to the string value 
		  <varname>m</varname>, the expiration value is defined in minutes
		  instead of days. If not set, 
		  <varname>days</varname> is the default expiration. 
		</li> 
	 </ul> 
	 <p> 
		<b>Properties</b> 
	 </p> 
	 <ul id="ul_400D445383814450BD7AA97DB9FE043D"> 
		<li id="li_2D4BF6E14C384CDAA2FE546CE3735C87">This plug-in is commonly
		  used on conversion variables. However, you can use it on any 
		  <keyword>Analytics</keyword> variable. 
		</li> 
		<li id="li_C5B5B8B98B8C4C5F89E44315EAD8AE1E">When Javascript encounters
		  this function, it compares the defined value to what is stored in the cookie.
		  If the defined value is different from the cookie value, the defined value is
		  set. If the defined value is the same as the cookie value, an empty string is
		  returned. 
		</li> 
		<li id="li_70F2E116425A49BF807B83EE9692714A">The cookie can only store a
		  single value, meaning the plug-in only looks as the last defined value. 
		</li> 
		<li id="li_9DA978B470D6458E9B4F6FF989F59AF7">The plug-in does not stop
		  all values from defining the variable after it is defined. The plug-in only
		  prevents the last value from being set multiple times consecutively. 
		</li> 
		<li id="li_55E10781919C43D384BACF808373EB47">If the end user blocks or
		  rejects cookies, the original value is always returned. 
		</li> 
		<li id="li_038AA6B20C194CE29047CB9D9369DBE0">The plug-in's session is
		  different from what 
		  <keyword>Analytics</keyword> defines as a session (or visit). 
		  <keyword>Analytics</keyword> terminates a session after 12 hours of
		  activity or 30 minutes of inactivity. Because the plug-in uses the browser's
		  session definition, it is terminated only after the user closes the tab or
		  exits the browser. 
		  <ul id="ul_E466A97D9152408990682ECFD284BC92"> 
			 <li id="li_5016A276A9B54BA383491572B4560116">If a user closes your
				page, opens a different tab and navigates back to your site within 30 minutes,
				the plug-in creates a new session while keeping the 
				<keyword>Analytics</keyword> visit open. 
			 </li> 
			 <li id="li_12CE9920B81D4AB3835854758E8A4833">If a user keeps the
				browser window open without clicking on a link for more than 30 minutes, the 
				<keyword>Analytics</keyword> visit expires while keeping the
				browser session open. 
			 </li> 
		  </ul> 
		</li> 
	 </ul> 
	 <note>The following instructions require you to alter the data collection
		code on your site. This can affect data collection on your site, and should
		only be done by a developer with experience using and implementing 
		<keyword>Analytics</keyword>. 
	 </note> 
	 <section id="section_177FF7F425B64FFB83CDE15A6ACC8D21"> 
		<title>Implementation</title> 
		<p>To implement this plug-in, place the following code within your 
		  <filepath>s_code.js</filepath> file 
		</p> 
		<codeblock outputclass="syntax javascript">/********************************************************************
 *
 * Main Plug-in code (should be in Plug-ins section)
 *
 *******************************************************************/
/*
 * Plugin: getValOnce_v1.11
 */
s.getValOnce=new Function("v","c","e","t",""
+"var s=this,a=new Date,v=v?v:'',c=c?c:'s_gvo',e=e?e:0,i=t=='m'?6000"
+"0:86400000,k=s.c_r(c);if(v){a.setTime(a.getTime()+e*i);s.c_w(c,v,e"
+"==0?0:a);}return v==k?'':v");</codeblock> 
		<p>Once the above code is implemented, define the desired variable using
		  the 
		  <varname>getValOnce</varname> function. The following are several
		  examples on how it can be implemented: 
		</p> 
		<p> 
		  <b>Preventing the same campaign value from being defined if a duplicate
			 value is detected within 30 days of cookie being set:</b> 
		</p> 
		<codeph>s.campaign=s.getValOnce(s.campaign,'s_cmp',30);</codeph> 
		<p> 
		  <b>Prevents the same eVar1 value from being defined if a duplicate
			 value is detected within 30 minutes of the cookie being set:</b> 
		</p> 
		<codeph>s.eVar1=s.getValOnce(s.eVar1,'s_ev1',30,'m');</codeph> 
		<p> 
		  <b>Prevents the same eVar2 value from being defined multiple times in
			 the same browser session:</b> 
		</p> 
		<codeph>s.eVar2=s.getValOnce(s.eVar2,'s_ev2');</codeph>
		<p> 
		  <b>Notes</b> 
		<ul id="ul_851CDA289DAE43A38AA87D2D53020408"> 
		  <li id="li_FD51A3C0A5D741BDBD73ACE6D0C3D670">Always test plug-in
			 installations extensively to ensure that data collection is as expected before
			 deploying in a production environment. 
		  </li> 
		  <li id="li_655E612299EE47589317C6177D0E4388">Make sure you delete the
			 cookie or use new, unique values during testing or variables will not be sent.
		  </li> 
		</ul> 
		</p> 
	 </section> 
  </conbody> 
</concept> 
