<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_0CA143FF6CD947B5AB49BA843B4A9B37"> 
  <title>Calling Plug-ins with 
	 <varname>doPlugins</varname> Function</title> 
  <shortdesc> JavaScript plug-ins are usually called by the 
	 <varname>doPlugins</varname> function, which is executed when the 
	 <varname>t()</varname> function is called in the 
	 <wintitle>Code to Paste</wintitle>. 
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta name="solution" content="Analytics"/> 
		<othermeta name="topic" content="Developer and implementation"/> 
		<othermeta name="subtopic" content="Plug-ins"/> </metadata>
  </prolog> 
  <conbody> 
	 <p>Consequently, if you set a variable in the 
		<varname>doPlugins</varname> function, you can overwrite a variable you
		set on the HTML page. The only time the 
		<varname>doPlugins</varname> function is not called is when the 
		<wintitle>usePlugins</wintitle> variable is set to 'false.' 
	 </p> 
	 <section id="section_6940FD16F2E94753A1C39694D0CF5FBA"> 
		<title>Code Example</title> 
		<p>The code example below is what the 
		  <varname>doPlugins</varname> function looks like in your JavaScript
		  file: 
		</p> 
		<p>AppMeasurement for JavaScript: 
		</p> 
		<codeblock outputclass="syntax javascript">/* Plugin Config */
s.usePlugins=true
s.doPlugins=function(s) {
	/* Add calls to plugins here */
}</codeblock> 
		<p>H code: 
		</p> 
		<codeblock outputclass="syntax javascript">/* Plugin Config */
s.usePlugins=true
function s_doPlugins(s) {
	/* Add calls to plugins here */
}
s.doPlugins=s_doPlugins</codeblock> 
		<note>H code and earlier versions use a different syntax to support some
		  very old browsers (such as IE 4 and 5). 
		</note> 
	 </section> 
	 <section id="section_70B7D58E057B48058E25907AB3726725"> 
		<title>Renaming the 
		  <varname>doPlugins</varname> Function</title> 
		<p>The 
		  <varname>doPlugins</varname> function is typically called 
		  <varname>s_doPlugins</varname>. In certain circumstances, (usually when
		  more than one version of code may appear on a single page) the 
		  <varname>doPlugins</varname> function name may be changed. If the
		  standard 
		  <varname>doPlugins</varname> function needs to be renamed to avoid
		  conflicts, ensure that 
		  <varname>doPlugins</varname> is assigned the correct function name, as
		  shown in the example below. 
		</p> 
		<codeblock outputclass="syntax javascript">/* Plugin Config */
s_mc.usePlugins=true
function s_mc_doPlugins(s_mc) {
	/* Add calls to plugins here */
}
s_mc.doPlugins=s_mc_doPlugins
</codeblock> 
	 </section> 
	 <section id="section_FA5D901CC5214D54BCD08AB77BED7925"> 
		<title>Using 
		  <varname>doPlugins</varname></title> 
		<p>The 
		  <varname>doPlugins</varname> function provides an easy way to give
		  default values to variables or to take values from 
		  <wintitle>query string parameters</wintitle> on any page of the site.
		  Using 
		  <varname>doPlugins</varname> is often easier than populating the values
		  in the HTML page because only one file must be updated. Keep in mind that
		  changes to the JavaScript file are not always immediate. Return visitors to
		  your site are often using cached versions of the JavaScript file. This means
		  that updates to the file may not be applied to all visitors for up to one month
		  after the change is made. 
		</p> 
		<p>The following example shows how the 
		  <varname>doPlugins</varname> function can be used to set a default
		  value for a variable and to get a value from the query string. 
		</p> 
		<codeblock outputclass="syntax javascript">/* Plugin Config */
s.usePlugins=true
s.doPlugins=function(s) {
	/* Add calls to plugins here */
	// if prop1 doesn't have a value, set it to "Default Value"
	if(!s.prop1)
s.prop1="Default Value"

	// if campaign doesn't have a value, get cid from the query string
	if(!s.campaign)
s.campaign=s.getQueryParam('cid');

// Note: The code to read query parameters is different for 
// Appmeasurement for JavaScript since a plug-in is not required:
// s.campaign=s.Util.getQueryParam('cid');
}
</codeblock> 
	 </section> 
	 <section id="section_C5494347D85940A78670032199787CD0"> 
		<title>Installed Plug-ins</title> 
		<p>To find out whether a plug-in is included in your JavaScript file and
		  ready for use, look in the 
		  <wintitle>Plugins Section</wintitle> of the JavaScript file. The
		  following example shows the 
		  <wintitle>getQueryParam</wintitle> function. 
		</p> 
		<codeblock outputclass="syntax javascript">/************************** PLUGINS SECTION *************************/
/* You may insert any plugins you wish to use here.                 */
/*
 * Plugin: getQueryParam 1.3 - Return query string parameter values
 */
s.getQueryParam=new Function("qp","d",""
+"var s=this,v='',i,t;d=d?d:'';while(qp){i=qp.indexOf(',');i=i&lt;0?qp.l"
//
// ... more code below ...
//
</codeblock> 
	 </section> 
  </conbody> 
</concept> 
