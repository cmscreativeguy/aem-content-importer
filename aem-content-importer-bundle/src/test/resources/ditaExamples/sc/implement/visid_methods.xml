<?xml version="1.0"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_96E28BAE2BEE4E83BBF9B30054852EA3"> 
  <title>Methods</title> 
  <shortdesc><?xm-replace_text Short Description?>
  </shortdesc> 
  <prolog> 
	 <metadata> 
		<othermeta content="Analytics" name="solution"/> </metadata>
  </prolog> 
  <conbody>
	 <p><?xm-replace_text Paragraph?>
	 </p>
	 <table id="table_E2B71B03EA174834980A9495BAD7973B">
		<tgroup cols="2"><colspec colnum="1" colname="col1"
		  colwidth="1.00*"/><colspec colnum="2" colname="col2" colwidth="2.71*"/><thead>
			 <row>
				<entry colname="col1">
				</entry>
				<entry colname="col2">
				</entry>
			 </row></thead>
		  <tbody>
			 <row>
				<entry colname="col1">getInstance
				</entry>
				<entry colname="col2">
				  <p>The Visitor API maintains a list of all instances created
					 keyed off of an Adobe Marketing Cloud Organization ID so if the application
					 using the Visitor API isn't passing around a reference to the instance it can
					 find that instance again instead of creating a new one. This also allows us to
					 support multiple instances for different companies in the same web
					 page/application. One company may partner with another for a marketing campaign
					 and both companies want to have their marketing cloud applications in the pages
					 or applications related to that campaign and we need to support that use case.
				  </p>
				  <p>If getInstance doesn't find an existing instance it will
					 create a new one and return that new instance. This is useful for applications
					 that don't have a clear "init" phase but need to call into the Visitor API in
					 multiple places. They can just call getInstance in all of those places and the
					 first to execute will be the one that creates the instance.
				  </p>
				</entry>
			 </row>
			 <row>
				<entry colname="col1">setMarketingCloudVisitorID
				</entry>
				<entry colname="col2">
				  <p>There are some cases where the client may want to generate
					 their own Marketing Cloud Visitor ID because their visitors are always in an
					 authenticated state so they don't have to care about cliffing visitors between
					 unauthenticated and authenticated state and they have or can generate a 128bit
					 number to represent the visitor that gives them the view of visitors they want
					 which may include tracking that visitor across devices. There is also the use
					 case where a client wants to do their sent to identify visitors across their
					 different properties by embedding the Marketing Cloud Visitor ID in links that
					 cross between properties allowing the destination page to pull out the
					 Marketing Cloud Visitor ID from the query-string and set it on the new
					 property. For these restricted use case we allow the clients implementation to
					 override our automatic generation and handling of the Marketing Cloud Visitor
					 ID.
				  </p>
				</entry>
			 </row>
			 <row>
				<entry colname="col1">setCustomerIDs
				</entry>
				<entry colname="col2">
				</entry>
			 </row>
		  </tbody>
		</tgroup>
	 </table>
  </conbody>
</concept>
