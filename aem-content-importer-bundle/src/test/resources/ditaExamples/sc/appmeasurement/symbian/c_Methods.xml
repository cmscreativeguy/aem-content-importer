<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_427A1CE7D8D74B4688202418D22B1055">
  <title>Methods</title>
  <shortdesc>The following tracking methods send data to Adobe data collection
	 servers. 
  </shortdesc>
  <prolog>
    <metadata>
      <othermeta name="solution" content="Analytics,Developer" />
    </metadata>
  </prolog>
  <conbody>
    <p>Page view tracking (track) and link tracking (trackLink) sends all
		variables that have values (non-NULL, non-empty). You should reset or empty all
		variables, as needed, before calling track or trackLink. 
	 </p>
    <table id="table_2F8B37C6C7784B619F40CDC9B21939C3">
      <tgroup cols="2">
        <colspec colnum="1" colname="col1" colwidth="1.00*" />
        <colspec colnum="2" colname="col2" colwidth="5.49*" />
        <thead>
          <row>
            <entry colname="col1">Method 
				</entry>
            <entry colname="col2">Description 
				</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">
              <b>track</b>
            </entry>
            <entry colname="col2">
              <p>
                <b>Syntax:</b>
              </p>
              <codeblock>//standard call using default values
s.track();

//track passing in a map object to provide temporary variable overrides
map&lt;string, string&gt; myMap;
myMap["evar1"] = "new_evar1_value";
myMap["evar74"] = "new_evar74_value";
map&lt;string, string&gt; *ptr_map = &amp;myMap;

s.track(ptr_map * variableOverrides = NULL);

</codeblock>
              <p>Sends a standard page view to Adobe data collection servers,
					 along with any Track Config Variables that have values. 
				  </p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <b>trackLink</b>
            </entry>
            <entry colname="col2">
              <p>
                <b>Syntax:</b>
              </p>
              <codeblock>
s.trackLink( string const &amp; url, string const &amp; type, string const &amp; name,map&lt;string,string&gt; * variableOverrides = NULL );</codeblock>
              <p>Sends custom, download or exit link data to Adobe data
					 collection servers, along with any track config variables that have values. Use
					 trackLink to track all activity that should not capture a page view. trackLink
					 has the following parameters: 
				  </p>
              <p>
                <b>url:</b> Identifies the clicked URL. If no URL is
					 specified, the name is used. Use this only when linking to a Web page from
					 within your iOS application. Otherwise, pass in nil for this parameter. 
				  </p>
              <p>
                <b>type:</b> Identifies the link report that will display the
					 URL or name. Supported values include: 
				  </p>
              <ul id="ul_1FD6517D96064DA18AD2EF65B1C368F5">
                <li id="li_1F0B059FE70C4792887070C89F8B35F1">
                  <codeph>“o”</codeph> (Custom Links) 
					 </li>
                <li id="li_08EC241E0D644EE397B586009DCC586E">
                  <codeph>“d”</codeph> (File Downloads) 
					 </li>
                <li id="li_D0D2C4AEC54D46D7A8C4026CE273A066">
                  <codeph>“e”</codeph> (Exit Links) 
					 </li>
              </ul>
              <p>
                <b>name:</b> The name that appears in the link report. If no
					 name is specified, the report uses the URL. 
				  </p>
              <p>
                <b>variable overrides:</b> optional map of temporary variable
					 overrides. 
				  </p>
              <p>To collect data, you must specify either the name or url
					 parameter. When not using one of these parameters, pass in an empty string 
					 <codeph>""</codeph> as the value. 
				  </p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </conbody>
  <concept id="concept_F103098580A8452CA6BD08CF43751B8C">
    <title>Offline Tracking</title>
    <shortdesc>AppMeasurement lets you measure application usage even when the
		device is offline. 
	 </shortdesc>
    <conbody>
      <p> When enabled, Offline AppMeasurement behaves in the following way: 
		</p>
      <ul id="ul_677320F5DF4B47AB8D409588A51465FB">
        <li id="li_A9900BBEAC5045428F0033D67D4D1F7D">The application generates
			 a “hit” (a track()or tracklink() method call), but the data transmission fails.
			 
		  </li>
        <li id="li_737DC8DDA3AC4CB8B726F88A8E72262B">AppMeasurement generates a
			 timestamp for the current hit. 
		  </li>
        <li id="li_A29F879ABBD542B78FD483A3E8AA1E22">AppMeasurement buffers the
			 hit data, and backs up buffered hit data to persistent storage to prevent data
			 loss. 
		  </li>
      </ul>
      <p>At each subsequent hit, or at 500-millisecond intervals (whichever is
		  shorter), AppMeasurement attempts to send the buffered hit data, maintaining
		  the original hit order. If the data transmission fails, it continues to buffer
		  the hit data (This continues while the device is offline). 
		</p>
      <p>To enable offline AppMeasurement, your report suite must be
		  timestamp-enabled. After you make this change, all hits must be time-stamped or
		  they are dropped. If you are currently reporting AppMeasurement data to a
		  report suite that also collects data from JavaScript, you might need to set up
		  a separate report suite for Offline AppMeasurement to avoid data loss. 
		</p>
      <p>Offline measurement uses the following methods and variables: 
		</p>
      <table id="table_7F7BF10EF05A4D869B37269C8C0AEE4B">
        <title>Offline Measurement Variables</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="1.02*" />
          <colspec colnum="3" colname="col3" colwidth="3.23*" />
          <thead>
            <row>
              <entry colname="col1">Name 
				</entry>
              <entry colname="col2">Type / Default Value 
				</entry>
              <entry colname="col3">Description 
				</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <b>trackOffline 
				  </b>
              </entry>
              <entry colname="col2">
                <codeph>Boolean / false 
				  </codeph>
              </entry>
              <entry colname="col3">
                <p>Enables/Disables offline AppMeasurement. 
				  </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <b>offlineLimit</b>
              </entry>
              <entry colname="col2">
                <codeph>Integer / 10 
				  </codeph>
              </entry>
              <entry colname="col3">
                <p>
                  <b>This value is not configurable in this beta release.</b>
                </p>
                <p>Sets the maximum number of hits to buffer. 
				  </p>
                <p>When the number of buffered hits reaches offlineLimit,
					 AppMeasurement drops the oldest buffered hit, then buffers the newest hit. 
				  </p>
                <p>Tune this value based on the amount of data (the number of
					 variables) sent with each hit. 
				  </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <b>offlineThrottleDelay</b>
              </entry>
              <entry colname="col2">
                <codeph>Integer / 1000 
				  </codeph>
              </entry>
              <entry colname="col3">
                <p>
                  <b>This value is not configurable in this beta release.</b>
                </p>
                <p>Specifies a cadence (or delay), in milliseconds, for sending
					 buffered hit data when AppMeasurement detects an active network connection.
					 Doing so mitigates the performance impact of sending multiple hits on the
					 application. 
				  </p>
                <p>For example, if 
					 <codeph>offlineThrottleDelay=1000</codeph>, and it takes 300ms
					 to send the hit data, AppMeasurement waits 700ms before sending the next
					 buffered hit. 
				  </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <b>timestamp</b>
              </entry>
              <entry colname="col2">
                <codeph>Integer / 0 
				  </codeph>
              </entry>
              <entry colname="col3">
                <p>Overrides the default timestamp mechanism in AppMeasurement so
					 you can integrate the application’s offline measurement with an existing queue
					 system. 
				  </p>
                <p>Adobe recommends letting AppMeasurement manage timestamps, if
					 possible. 
				  </p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table id="table_F3E8F99C488C42799BC81D8B71DF395D">
        <title>Offline Measurement Methods</title>
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="4.15*" />
          <thead>
            <row>
              <entry colname="col1">Name 
				</entry>
              <entry colname="col2">Description 
				</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <b>forceOffline</b>
              </entry>
              <entry colname="col2">
                <p>
                  <b>This method is not available in this beta release.</b>
                </p>
                <p>Forces AppMeasurement to behave as if it is offline. 
				  </p>
                <p>This lets you delay sending hit data during a
					 hardware-intensive operation, such as video playback. This lets you collect the
					 data offline, and then send it once the operation completes. 
				  </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <b>forceOnline</b>
              </entry>
              <entry colname="col2">
                <p>
                  <b>This method is not available in this beta release.</b>
                </p>
                <p>Returns AppMeasurement to normal operating mode after using
					 the forceOffline() method. 
				  </p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </conbody>
  </concept>
</concept>