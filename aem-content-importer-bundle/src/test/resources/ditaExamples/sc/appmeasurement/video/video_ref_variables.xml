<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_338A9CA5EC1F4054B9BD07A5FF4F7DAE">
  <title>Media Module Variables</title>
  <shortdesc>The following variables let you configure video measurement. 
  </shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <keyword>media</keyword>
        <keyword>milestone</keyword>
        <keyword>sdk</keyword>
        <keyword>video</keyword>
      </keywords>
      <othermeta name="solution" content="Analytics" />
      <othermeta name="topic" content="Developer and implementation" />
    </metadata>
  </prolog>
  <conbody>
    <p>You must define values for the variables in the Required Variables
		table. 
	 </p>
    <p>Additionally, to track events in your video player, you must enable
		autoTrack (for supported players) or implement custom player event tracking
		using the open, play, stop, and close methods. 
	 </p>
    <table id="table_9E35A29552234DF5B933FB1FA4AB5BDD">
      <tgroup cols="2">
        <colspec colnum="1" colname="col1" colwidth="1.00*" />
        <colspec colnum="2" colname="col2" colwidth="2.14*" />
        <thead>
          <row>
            <entry colname="col1">
              <p>Variable 
				  </p>
            </entry>
            <entry colname="col2">
              <p>Description 
				  </p>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">
              <codeph>Media.trackUsingContextData</codeph>
            </entry>
            <entry colname="col2">
              <b>Syntax:</b>
              <codeblock>s.Media.trackUsingContextData = true;</codeblock>
              <p>This option enables integrated video tracking. When 
					 <codeph>trackUsingContextData = true</codeph>, the 
					 media module generates context data for
					 media tracking, instead of the legacy pev3 value used in previous versions of
					 video measurement. 
				  </p>
              <p>Use 
					 <codeph>Media.contextDataMapping</codeph> to map the context
					 data to the selected eVars and Events. 
				  </p>
              <p>Defaults to 
					 <codeph>false</codeph>. 
				  </p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>Media.contextDataMapping</codeph>
            </entry>
            <entry colname="col2">
              <b>Syntax:</b>
              <codeblock>s.Media.contextDataMapping = {
"a.media.name":"eVar2,prop2",
"a.media.segment":"eVar3",
"a.contentType":"eVar1",
"a.media.timePlayed":"event3",
"a.media.view":"event1",
"a.media.segmentView":"event2",
"a.media.complete":"event7",
"a.media.milestones":{
  	25:"event4",
  	50:"event5",
  	75:"event6"
  }
};</codeblock>
              <p>An object that defines variable mapping to eVars and Events
					 that you want to use for video measurement. 
				  </p>
              <p>The object must map the following fields: 
				  </p>
              <p>
                <b>a.media.name</b>: (Required) Populates variables with the
					 video name. Provide the eVar that you selected to store the video name, and the
					 Custom Insight Video variable (s.prop) you want to use for video pathing.
					 Provide the values in a comma-separated list. 
				  </p>
              <p>
                <b>a.media.segment</b>: (Optional) The eVar that you want to
					 store the media segment name. 
				  </p>
              <p>
                <b>a.contentType</b>: (Optional) The eVar that you want to
					 store the video value, which contains visit and visitor tracking enabled to
					 generate video visit and visitor reporting. The variable you select is likely
					 already used to store data such as article slide show or product page 
				  </p>
              <p>
                <b>a.media.view</b>: (Required) The Event that you want to
					 count media views. 
				  </p>
              <p>
                <b>a.media.segmentView</b>: (Optional) The Event that you want
					 to count segment views. 
				  </p>
              <p>
                <b>a.media.complete</b>: (Optional) The Event that you want to
					 count complete views. 
				  </p>
              <p>
                <b>a.media.timePlayed</b>: (Optional, highly recommended) The
					 numeric Event that you want to store the number of video seconds played. 
				  </p>
              <p>
                <b>a.media.milestones</b>: (Optional) An object that maps
					 s.Media.trackMilestones milestones to counter Events. Media.segmentByMilestones
					 should be set to true if you define milestones. 
				  </p>
              <p>
                <b>Ad tracking</b>
              </p>
              <p>To track ads, the following context data variables are
					 available: 
				  </p>
              <p>
                <b>a.media.ad.name</b>: (Required) Populates variables with the
					 ad name. Provide the eVar that you selected to store the ad name, and the
					 Custom Insight Video variable (s.prop) you want to use for pathing. Provide the
					 values in a comma-separated list. 
				  </p>
              <p>
                <b>a.media.ad.pod</b>: The position in the primary content the
					 ad was played. 
				  </p>
              <p>
                <b>a.media.ad.podPosition:</b> The position within the pod
					 where the ad is played. 
				  </p>
              <p>
                <b>a.media.ad.CPM:</b> The CPM or encrypted CPM (prefixed with
					 a "~") that applies to this playback. 
				  </p>
              <p>
                <b>a.media.ad.view:</b> Works the same as a.media.view. 
				  </p>
              <p>
                <b>a.media.ad.clicked:</b> Count the number of clicks for the
					 ad (Media.click calls). 
				  </p>
              <p>
                <b>a.media.ad.timePlayed:</b> Works the same as
					 a.media.timePlayed. 
				  </p>
              <p>
                <b>a.media.ad.complete:</b> Works the same as a.media.complete.
					 
				  </p>
              <p>
                <b>a.media.ad.segment:</b> Works the same as a.media.segment. 
				  </p>
              <p>
                <b>a.media.ad.segmentView:</b> Works the same as
					 a.media.segmentView. 
				  </p>
              <p>
                <b>a.media.ad.milestones:</b> Works the same as
					 a.media.milestones. 
				  </p>
              <p>
                <b>a.media.ad.offsetMilestones:</b> Works the same as
					 a.media.offsetMilestones. 
				  </p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>Media.trackVars</codeph>
            </entry>
            <entry colname="col2">
              <b>Syntax:</b>
              <codeblock>s.Media.trackVars="events,prop2,eVar1,eVar2,eVar3";</codeblock>
              <p>A comma-separated list of all variables that are set in your
					 video tracking code. 
				  </p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>Media.trackEvents</codeph>
            </entry>
            <entry colname="col2">
              <b>Syntax:</b>
              <codeblock>s.Media.trackEvents="event1,event2,event3,event4,event5,event6,event7"</codeblock>
              <p>A comma-separated list of all events that are set in your
					 video tracking code. 
				  </p>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>The following table contains optional variables. 
	 </p>
    <section id="section_8CD2E2121A8C48B09D523D14456AD096">
      <title>Optional Variables</title>
      <p>
        <?xm-replace_text Paragraph?>
      </p>
      <table id="table_379CEDB518B948C4B17DC12BAC169792">
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="1.61*" />
          <thead>
            <row>
              <entry colname="col1">
                <p>Variable 
					 </p>
              </entry>
              <entry colname="col2">
                <p>Description 
					 </p>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <codeph>Media.autoTrack</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.autoTrack = true</codeblock>
                <p>Enables automatic tracking for supported players. Supported
						players are as follows: 
					 </p>
                <ul id="ul_BF3BF46ACC3F48F78C46D1FC171A17BB">
                  <li id="li_4318B12D11A641CD8D163E48ACCE7869">Open Source
						  Media Framework (OSMF) 
						</li>
                  <li id="li_0D958F9FB19A4AB78B235F3F59E37E7D">FLVPlayback
						  (Video players created by the import video wizard in Flash Professional) 
						</li>
                  <li id="li_EAF29CC667B8491590AAB71CDA0D7606">Silverlight 
						</li>
                  <li id="li_96F1A6EDB81741B6A20368550B01E99B">MediaDisplay 
						</li>
                  <li id="li_6E7F95AA4C5C4178AF5F3E6193A4B1DA">MediaPlayback 
						</li>
                  <li id="li_836F3D05E4C54708BE066ACB97368A77">Brightcove API
						  versions 2 &amp; 3 (see 
						  <xref href="video_other_players.xml#concept_3CE6B48FDA4B40B4B6399789C818C10B/section_6E4E508717C14D13BEF688BD1144BDAD" type="section" format="dita" scope="local"><?xm-replace_text Brightcove?></xref>)
						  
						</li>
                  <li id="li_018438AC7B6A413E8E22AE45B7932427">Windows Media
						  Player, Quicktime, or Real Player using JavaScript 
						</li>
                </ul>
                <p>If you are not using one of the above players you can use
						Media.open, Media.play, Media.stop, and Media.close to track player events. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.autoTrackNetStreams</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.autoTrackNetStreams = true</codeblock>
                <p>Flash 10.3 introduced new functionality to the NetStream
						component that enables enhanced video tracking. If you are using a custom Flash
						NetStream player you can enable this variable to enable functionality similar
						to autoTrack. This method requires that videos are viewed in Flash 10.3 or
						later. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.completeByCloseOffset</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.completeByCloseOffset = true</codeblock>
                <p>This setting lets you count a complete video view a few
						seconds before the actual end of the video. 
					 </p>
                <p>The event is sent based on the number of seconds specified
						in 
						<codeph>completeCloseOffsetThreshold</codeph>. This lets you
						measure completes in video players that never report an offset equal to the
						length of the video. 
					 </p>
                <p>By default, this value is set to true and the threshold is
						set to 1 second. With these defaults the complete event is sent 1 second before
						the end of the video. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.completeCloseOffsetThreshold</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.completeCloseOffsetThreshold = 1</codeblock>
                <p>This threshold lets you count a complete video view a few
						seconds before the actual end of the video. 
						<codeph>Media.completeByCloseOffset</codeph> must be set to
						true to use this threshold. 
					 </p>
                <p>The integer value you supply determines how far off in
						seconds the offset can be from the length of the video at close and still count
						as a complete. This lets you measure completes in video players that never
						report an offset equal to the length of the video. 
					 </p>
                <p>The default threshold is 1 second. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.playerName</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.playerName = "Custom Player Name"</codeblock>
                <p>Specifies a custom video player name. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.trackSeconds</codeph>
              </entry>
              <entry colname="col2">
                <codeblock>s.Media.trackSeconds = 15</codeblock>
                <p>Defines the interval, in seconds, for sending video tracking
						data to Adobe data collection servers while the video is playing. The value
						must be set in increments of 5 seconds. 
					 </p>
                <p>Enabling 
						<codeph>Media.trackSeconds</codeph> triggers only the events
						that are defined in Media.contextDataMapping. To send additional variables
						outside of those specified for video measurement, you must use Media.Monitor 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.trackMilestones</codeph>
              </entry>
              <entry colname="col2">
                <p>Tracks milestones as percentage of the video length. 
					 </p>
                <b>Syntax:</b>
                <codeblock>s.Media.trackMilestones = "25,50,75";</codeblock>
                <p>Defines the interval, as a percentage of the video length,
						for sending video tracking data to Adobe data collection servers. Specify the
						milestones as a comma-separated list of whole numbers. For example: 10 = 10%,
						23 = 23%). 
					 </p>
                <p>Because these milestones are fixed points in the video, if a
						visitor views past the 10% milestone, then rewinds and passes the 10% milestone
						again, the 
						media module sends the tracking data
						multiple times. Similarly, if a visitor fast forwards past a milestone, the 
						media module does not send the tracking
						data for that milestone. 
					 </p>
                <p>Enabling 
						<codeph>Media.trackMilestones</codeph> triggers only the
						events that are defined in 
						<codeph>Media.contextDataMapping</codeph>. To send additional
						variables outside of those specified for video measurement, you must use 
						<codeph>Media.monitor</codeph>. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.trackOffsetMilestones</codeph>
              </entry>
              <entry colname="col2">
                <p>Tracks milestones as seconds elapsed from the beginning of
						the video. 
					 </p>
                <b>Syntax:</b>
                <codeblock>s.Media.trackOffsetMilestones = "20,40,60";</codeblock>
                <p>Defines the interval, as seconds elapsed from the beginning
						of the video, for sending video tracking data to Adobe data collection servers.
						Specify the milestones as a comma-separated list of whole numbers. For example:
						20 = 20 seconds, 40 = 40 seconds). 
					 </p>
                <p>Because these milestones are fixed points in the video, if a
						visitor views past the 20 seconds milestone, then rewinds and passes the 20
						seconds milestone again, the media module sends the tracking data multiple
						times. Similarly, if a visitor fast forwards past a milestone, the media module
						does not send the tracking data for that milestone. 
					 </p>
                <p>Enabling 
						<codeph>Media.trackOffsetMilestones</codeph> triggers only
						the events that are defined in 
						<codeph>Media.contextDataMapping</codeph>. To send additional
						variables outside of those specified for video measurement, you must use 
						<codeph>Media.monitor</codeph>. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.segmentByMilestones</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.segmentByMilestones = true;</codeblock>
                <p>Automatically generates the segment name, segment number,
						and segment length data, based on the length of the media and the milestones
						specified in 
						<codeph>Media.trackMilestones</codeph>. 
					 </p>
                <p>Segmenting by milestones is the only way to define segments
						when using autoTrack. 
					 </p>
                <p>Defaults to 
						<codeph>false</codeph>. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.segmentByOffsetMilestones</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.segmentByOffsetMilestones = true;</codeblock>
                <p>Automatically generates the segment name, segment number,
						and segment length data, based on the length of the media and the milestones
						specified in 
						<codeph>Media.trackOffsetMilestones</codeph>. 
					 </p>
                <p>Segmenting by milestones is the only way to define segments
						when using autoTrack. 
					 </p>
                <p>Defaults to 
						<codeph>false</codeph>. 
					 </p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section id="section_1EF7D12D42C744A295330346017A6D67">
      <title>Ad Tracking Variables</title>
      <p>These variables are used to send ad information in conjunction with
		  the 
		  <codeph>openAd</codeph> method. See 
		  <xref href="video_ads.xml#concept_045DCEBBB82144309DF95CF3C4A6B6A8" format="dita" scope="local"><?xm-replace_text Video Ad Tracking?></xref>. 
		</p>
      <table id="table_A56EE2E3E7D34A99A63988B8D76F5F86">
        <tgroup cols="2">
          <colspec colnum="1" colname="col1" colwidth="1.00*" />
          <colspec colnum="2" colname="col2" colwidth="1.63*" />
          <thead>
            <row>
              <entry colname="col1">
                <p>Variable 
					 </p>
              </entry>
              <entry colname="col2">
                <p>Description 
					 </p>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry colname="col1">
                <codeph>Media.adTrackSeconds</codeph>
              </entry>
              <entry colname="col2">
                <codeblock>s.Media.adTrackSeconds = 15</codeblock>
                <p>Defines the interval, in seconds, for sending video ad
						tracking data to Adobe data collection servers while the video is playing. The
						value must be set in increments of 5 seconds. 
					 </p>
                <p>Enabling 
						<codeph>Media.adTrackSeconds</codeph> triggers only the
						events that are defined in 
						<codeph>Media.contextDataMapping</codeph>. To send additional
						variables outside of those specified for video measurement, you must use 
						<codeph>Media.Monitor</codeph>. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.adTrackMilestones</codeph>
              </entry>
              <entry colname="col2">
                <p>Tracks ad milestones as percentage of the ad length. 
					 </p>
                <b>Syntax:</b>
                <codeblock>s.Media.adTrackMilestones = "25,50,75";</codeblock>
                <p>Defines the interval, as a percentage of the ad length, for
						sending ad tracking data to Adobe data collection servers. Specify the
						milestones as a comma-separated list of whole numbers. For example: 10 = 10%,
						23 = 23%). 
					 </p>
                <p>Because these milestones are fixed points in the ad, if a
						visitor views past the 10% milestone, then rewinds and passes the 10% milestone
						again, the 
						media module sends the tracking data
						multiple times. Similarly, if a visitor fast forwards past a milestone, the 
						media module does not send the tracking
						data for that milestone. 
					 </p>
                <p>Enabling 
						<codeph>Media.adTrackMilestones</codeph> triggers only the
						events that are defined in 
						<codeph>Media.contextDataMapping</codeph>. To send additional
						variables outside of those specified for video measurement, you must use 
						<codeph>Media.monitor</codeph>. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.adTrackOffsetMilestones</codeph>
              </entry>
              <entry colname="col2">
                <p>Tracks ad milestones as seconds elapsed from the beginning
						of the ad. 
					 </p>
                <b>Syntax:</b>
                <codeblock>s.Media.adTrackOffsetMilestones = "20,40,60";</codeblock>
                <p>Defines the interval, as seconds elapsed from the beginning
						of the ad, for sending ad tracking data to Adobe data collection servers.
						Specify the milestones as a comma-separated list of whole numbers. For example:
						20 = 20 seconds, 40 = 40 seconds). 
					 </p>
                <p>Because these milestones are fixed points in the ad, if a
						visitor views past the 20 seconds milestone, then rewinds and passes the 20
						seconds milestone again, the media module sends the tracking data multiple
						times. Similarly, if a visitor fast forwards past a milestone, the media module
						does not send the tracking data for that milestone. 
					 </p>
                <p>Enabling 
						<codeph>Media.adTrackOffsetMilestones</codeph> triggers only
						the events that are defined in 
						<codeph>Media.contextDataMapping</codeph>. To send additional
						variables outside of those specified for video measurement, you must use 
						<codeph>Media.monitor</codeph>. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.adSegmentByMilestones</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.adSegmentByMilestones = true;</codeblock>
                <p>Automatically generates the segment name, segment number,
						and segment length data, based on the length of the media and the milestones
						specified in 
						<codeph>Media.adTrackMilestones</codeph>. 
					 </p>
                <p>Segmenting by milestones is the only way to define segments
						when using autoTrack. 
					 </p>
                <p>Defaults to 
						<codeph>false</codeph>. 
					 </p>
              </entry>
            </row>
            <row>
              <entry colname="col1">
                <codeph>Media.adSegmentByOffsetMilestones</codeph>
              </entry>
              <entry colname="col2">
                <b>Syntax:</b>
                <codeblock>s.Media.adSegmentByOffsetMilestones = true;</codeblock>
                <p>Automatically generates the segment name, segment number,
						and segment length data, based on the length of the media and the milestones
						specified in 
						<codeph>Media.adTrackOffsetMilestones</codeph>. 
					 </p>
                <p>Segmenting by milestones is the only way to define segments
						when using autoTrack. 
					 </p>
                <p>Defaults to 
						<codeph>false</codeph>. 
					 </p>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </conbody>
</concept>