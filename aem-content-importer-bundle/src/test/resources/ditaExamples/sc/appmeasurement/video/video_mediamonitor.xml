<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd"[]>
<concept id="concept_6B10C4127F844D84A1FD0F59D818054F">
  <title>Measuring Additional Metrics using Media.monitor</title>
  <shortdesc>You can define a custom 
	 <codeph>Media.monitor</codeph> method to track additional video metrics. 
  </shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <keyword>media</keyword>
        <keyword>milestone</keyword>
        <keyword>sdk</keyword>
        <keyword>video</keyword>
      </keywords>
      <othermeta name="solution" content="Analytics" />
      <othermeta name="topic" content="Developer and implementation" />
    </metadata>
  </prolog>
  <conbody>
    <p>A custom 
		<codeph>Media.monitor</codeph> method gives you the most granular control
		over video tracking. AppMeasurement automatically calls the 
		<codeph>Media.monitor</codeph> method in the following circumstances: 
	 </p>
    <ul id="ul_2821128D7F464671A314AD6F873727FA">
      <li id="li_FC915A11D7F74651B065C0386E7C83C6">Every second while the video
		  is playing. 
		</li>
      <li id="li_D3785F89E26A477D97192AF12816FD7D">When an autoTrack
		  implementation, such as the OSMF plug-in, captures a player event like
		  scrubbing, pausing or resuming, end of video playback, etc. 
		</li>
      <li id="li_45F33DA9FA114869B2C55DD6E76557F3">When a non-autoTrack
		  (manual) implementation calls 
		  <codeph>Media.open</codeph>, 
		  <codeph>Media.play</codeph>, 
		  <codeph>Media.stop</codeph>, or 
		  <codeph>Media.close</codeph>. 
		</li>
    </ul>
    <p>Use this functionality to monitor the status of each video that is
		currently playing. With it, you can setup additional variables (Props, eVars,
		Events) and call 
		<codeph>Media.track</codeph> based on the current state of the video as
		it is playing. 
	 </p>
    <codeblock>s.Media.monitor(s, media)</codeblock>
    <p>This method takes the following parameters: 
	 </p>
    <p>
      <b>s</b>: The AppMeasurement instance. 
	 </p>
    <p>
      <b>media</b>: An object with members providing the state of the video.
		These members include: 
	 </p>
    <table id="table_8CF4CC7B333645DA89DAA9EF381EDC1D">
      <tgroup cols="2">
        <colspec colnum="1" colname="col1" colwidth="1.00*" />
        <colspec colnum="2" colname="col2" colwidth="2.67*" />
        <thead>
          <row>
            <entry colname="col1"> State Property 
				</entry>
            <entry colname="col2">Description 
				</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry colname="col1">
              <codeph>media.name</codeph>
            </entry>
            <entry colname="col2">The name of the video given in the call to 
				  <codeph>Media.open</codeph>. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.length</codeph>
            </entry>
            <entry colname="col2">The length of the video in seconds given in
				  the call to 
				  <codeph>Media.open</codeph>. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.openTime</codeph>
            </entry>
            <entry colname="col2">A Date object set to the time video tracking
				  started. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.offset</codeph>
            </entry>
            <entry colname="col2">The current offset into the video, in
				  seconds. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.percent</codeph>
            </entry>
            <entry colname="col2">The current offset into the video, as a
				  percentage of the video length ((media.offset / media.length) * 100). 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.timePlayed</codeph>
            </entry>
            <entry colname="col2">The total video playback time, in seconds.
				  This includes replay time due to rewind, and excludes time skipped by fast
				  forwarding. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.playerName</codeph>
            </entry>
            <entry colname="col2">The name of the media player given in the
				  call to 
				  <codeph>Media.open</codeph>. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.mediaEvent</codeph>
            </entry>
            <entry colname="col2">
              <p>The event that initiated the call to the 
					 <codeph>Media.monitor</codeph> method. Options include the
					 following: 
				  </p>
              <p>
                <b>OPEN</b>: The start of video playback. For a non-autoTrack
					 (manual) implementation, this is the first time 
					 <codeph>Media.play</codeph> is called after calling 
					 <codeph>Media.open</codeph>. 
				  </p>
              <p>
                <b>PLAY</b>: Video playback restarted. 
				  </p>
              <p>
                <b>STOP</b>: Video playback stopped due to pause, seek forward
					 or backwards, scrubbing started, etc. 
				  </p>
              <p>
                <b>CLOSE</b>: The end of video playback. For a non-autoTrack
					 (manual) implementation, this is when 
					 <codeph>Media.close</codeph> is called.
				  </p>
              <p>
                <b>MONITOR</b>: A check of the video state, which occurs every
					 second. 
				  </p>
              <p>
                <b>MILESTONE</b>: A video milestone was reached, as defined by
					 the 
					 <codeph>Media.trackMilestones</codeph> method. The 
					 <codeph>media.milestone</codeph> property identifies the
					 specific milestone that was reached. 
				  </p>
              <p>
                <b>SECONDS</b>: The playback time specified by 
					 <codeph>media.trackSeconds</codeph> has been reached. 
				  </p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.eventFirstTime</codeph>
            </entry>
            <entry colname="col2">A boolean property. When set to true,
				  indicates the 
				  <codeph>media.mediaEven</codeph>t occurred for the first time. If
				  media.mediaEvent = "MILESTONE" a true value indicates that this is the first
				  time to reach the video milestone identified in media.milestone. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.milestone</codeph>
            </entry>
            <entry colname="col2">
              <p>The milestone reached during video playback, as defined in the
					 
					 <codeph>Media.trackMilestones</codeph> method. 
				  </p>
              <p>This property is only set when 
					 <codeph>media.mediaEvent</codeph> is set to 
					 <userinput>"MILESTONE"</userinput>. 
				  </p>
            </entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.player</codeph>
            </entry>
            <entry colname="col2">Player-specific data created by some
				  autoTrack implementations. 
				</entry>
          </row>
          <row>
            <entry colname="col1">
              <codeph>media.player.metadata</codeph>
            </entry>
            <entry colname="col2">Player-specific method for retrieving video
				  metadata from the player. 
				</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p>A custom 
		<codeph>Media.monitor</codeph> method should do similar to the following:
		
	 </p>
    <ul id="ul_173C942E52D64DCC905ACFBDEBF74B8E">
      <li id="li_276D145CE43E4746A342D7859ED30083">Check the media object to
		  see if this is a point where you want to customize your video tracking. 
		</li>
      <li id="li_6A0D608282BF4BEAAECFFF323B7C2D31">Set custom props, eVars, and
		  events to customize your tracking. 
		</li>
      <li id="li_C15950D5A7DC43D5B8EA9E97CAAEDB47">Set 
		  <codeph>s.Media.trackVars</codeph> and 
		  <codeph>s.Media.trackEvents</codeph> filters to match the custom props,
		  eVars, and events you with to track along with the video data. 
		</li>
      <li id="li_74E326DD2E97455A9E8E3FC131FAD7E9">Call 
		  <codeph>s.Media.track(media.name)</codeph> to send off the video data
		  collected up to the current point along with your custom props, eVars, and
		  events. 
		</li>
    </ul>
    <section id="section_9072BCD06A054C3AB11E3DE3DEF361EC">
      <title>Define a method or function for Media.monitor</title>
      <p>To create a custom 
		  <codeph>Media.monitor</codeph> method you can set 
		  <codeph>Media.monitor</codeph> to an anonymous function or a class
		  method. The anonymous function or class method you define should take the
		  AppMeasurement instance and media object as shown in the media monitor
		  reference. 
		</p>
      <codeblock>//JavaScript or Flash anonymous function example
s.Media.monitor = function (s,media)  {
...
}</codeblock>
      <codeblock>//Silverlight class method example
s.Media.monitor = new AppMeasurement_Media_Monitor(myMediaMonitor);</codeblock>
      <codeblock>//OSMF anonymous function example
s.Media.monitor = function (s:Object,media:Object) {
...
}</codeblock>
    </section>
    <section id="section_BDAFE64513AF4B23A1E9DC6DFC2725A4">
      <title>Media.monitor Code Sample</title>
      <p>The following code sample demonstrates using Media.monitor to send
		  custom variables. 
		</p>
      <codeblock>/* Import line for ActionScript 3 */
import com.omniture.AppMeasurement;

/* Uncomment for ActionScript 2 with Flash Player 8+ and comment out other import lines */
/* import com.omniture.AS2.AppMeasurement; */

/* Uncomment for ActionScript 2 with Flash Player 6, 7, or Lite and comment out other import lines */
/* import com.omniture.AS2.FPL.AppMeasurement; */

var s:AppMeasurement = new AppMeasurement();
/* Uncomment for Flex and comment out addChild(s); */
/* rawChildren.addChild(s); */
addChild(s);

/* Specify the Report Suite ID(s) to track here */
s.account = "jdoe";
/* Turn on and configure debugging here */
s.debugTracking = true;
s.trackLocal = true;
/* You may add or alter any code config here */
s.pageName = "";
s.pageURL = "";
s.charSet = "UTF-8";
s.currencyCode = "USD";

s.Media.autoTrack=true;
s.Media.segmentByMilestones=true;
s.Media.trackMilestones="25,50,75";
s.Media.trackVars="eVar2,eVar3,eVar1,events,prop51,prop50";
s.Media.trackEvents="event1,event2,event3,event4,event5,event6,event7";

/* Turn on and configure ClickMap tracking here */
s.trackClickMap = true;
s.movieID = "";

/* WARNING: Changing any of the below variables will cause drastic changes
to how your visitor data is collected.  Changes should only be made
when instructed to do so by your account manager.*/
s.visitorNamespace = "corp1";
s.trackingServer = "corp1.d1.sc.omtrdc.net";
var tracked25:Boolean
var tracked50:Boolean
var tracked75:Boolean
var fireRequest:Boolean

s.Media.trackUsingContextData = true;

s.Media.contextDataMapping = {
"a.media.name":"eVar2",
"a.media.segment":"eVar3",
"a.contentType":"eVar1",
"a.media.timePlayed":"event3",
"a.media.view":"event1",
"a.media.segmentView":"event2",
"a.media.complete":"event7",
"a.media.milestones":{
25:"event4",
50:"event5",
75:"event6"
}
};

s.Media.monitor = function (s,media){
  
    if ((media.event == "MILESTONE") &amp;&amp; (media.eventFirstTime)) {
     if (media.milestone == 25) {
          s.prop51 = media.name+ " : " +"25%";
          fireRequest = true;
     }
     if (media.milestone == 50) {
          s.prop51 = media.name+ " : " +"50%";
          fireRequest = true;
     }
     if (media.milestone == 75) {
          s.prop51 = media.name+ " : " +"75%";
          fireRequest = true;
     }
     if (fireRequest) {
          fireRequest = false;
          sendRequest();
     }
}
                
    if(media.event=="OPEN") {
        s.prop50="Home page"
        sendRequest();
        s.prop50=""

    }
    
    if(media.event=="CLOSE") {
        s.prop51=media.name+ " : " +"100%"
        sendRequest();
        s.prop51=""

    }

    function sendRequest(){
        s.Media.track(media.name);
    }
}

</codeblock>
      <p>The following custom 
		  <codeph>Media.monitor</codeph> method sets eVar1 to the “series” key,
		  eVar2 to the “season” key, and eVar3 to the “episode” key in the
		  http://www.corp1.com/ namespace using OSMF metadata: 
		</p>
      <codeblock>s.Media.monitor = function (s:Object,media:Object) {
    s.trackVars = "events,eVar1,eVar2,eVar3";
    s.trackEvents = "event1,event2";
    s.eVar1 = media.player.metadata("http://www.corp1.com/","series");
    s.eVar2 = media.player.metadata("http://www.corp1.com/","season");
    s.eVar3 = media.player.metadata("http://www.corp1.com/","episode");
    if (media.mediaEvent == "OPEN") {
        s.events = "event1";
        s.Media.track(media.name);
    } else if (media.mediaEvent == "CLOSE") {
        s.events = "event2";
        s.Media.track(media.name);
    }
}</codeblock>
      <p>The following example shows a 
		  <codeph>Media.monitor</codeph> implementation in Silverlight: 
		</p>
      <codeblock>s.Media.media = new AppMeasurement_Media_Monitor(myMediaMonitor);

// ...

// custom variables (Props, eVars, Events) are sent automatically on an OPEN event, and when manually tracked here (in media monitor below)
private void myMediaMonitor(AppMeasurement s,AppMeasurement_Media_State media) {
     if (media.mediaEvent == "OPEN") { //executes when the video opens
          s.Media.trackVars = "eVar1,events";
          s.Media.trackEvents = "event1";
          s.events = "event1";
          s.eVar1 = media.name;
          s.Media.track(media.name);
     }
     if (media.mediaEvent == "CLOSE") { //executes when the video completes
          s.Media.trackVars = "eVar1,events";
          s.Media.trackEvents = "event4";
          s.events = "event4";
          s.eVar1 = media.name;
          s.Media.track(media.name);
     }</codeblock>
    </section>
  </conbody>
</concept>